#!/usr/bin/env python3
"""
Script pour v√©rifier les v√©hicules dans PostgreSQL sur Render
"""

import psycopg2
import os

def check_vehicules_render():
    """V√©rifier les v√©hicules dans PostgreSQL sur Render"""
    
    # URL de connexion PostgreSQL sur Render
    DATABASE_URL = "postgresql://myxploit_user:HqTbUT77VkyqtlVHSMJPTWTjeLX9xTYs@dpg-d2m55nbipnbc738t8etg-a/myxploit"
    
    try:
        print("üîå Connexion √† PostgreSQL sur Render...")
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        
        print("‚úÖ Connexion r√©ussie !")
        
        # V√©rifier la structure de la table vehicules
        print("\nüìã Structure de la table vehicules :")
        cursor.execute("""
            SELECT column_name, data_type, is_nullable 
            FROM information_schema.columns 
            WHERE table_name = 'vehicules' 
            ORDER BY ordinal_position
        """)
        
        columns = cursor.fetchall()
        for col in columns:
            print(f"  - {col[0]}: {col[1]} ({'NULL' if col[2] == 'YES' else 'NOT NULL'})")
        
        # Compter les v√©hicules
        print("\nüöõ Nombre de v√©hicules en base :")
        cursor.execute("SELECT COUNT(*) FROM vehicules")
        count = cursor.fetchone()[0]
        print(f"  Total: {count} v√©hicules")
        
        if count > 0:
            print("\nüìã Liste des v√©hicules :")
            cursor.execute("""
                SELECT id, nom, type, consommation, emissions, charge_utile, created_at
                FROM vehicules 
                ORDER BY nom
            """)
            
            vehicules = cursor.fetchall()
            for i, vehicule in enumerate(vehicules, 1):
                print(f"\n  üöõ V√©hicule #{i} (ID: {vehicule[0]})")
                print(f"     Nom: {vehicule[1]}")
                print(f"     Type: {vehicule[2]}")
                print(f"     Consommation: {vehicule[3]} L/100km")
                print(f"     √âmissions: {vehicule[4]} g CO‚ÇÇe/t.km")
                print(f"     Charge utile: {vehicule[5]} tonnes")
                print(f"     Cr√©√© le: {vehicule[6]}")
        else:
            print("\n‚ùå Aucun v√©hicule trouv√© dans la base de donn√©es")
            
        # V√©rifier aussi les √©nergies
        print("\n‚ö° Nombre d'√©nergies en base :")
        cursor.execute("SELECT COUNT(*) FROM energies")
        count_energies = cursor.fetchone()[0]
        print(f"  Total: {count_energies} √©nergies")
        
        if count_energies > 0:
            print("\nüìã Liste des √©nergies :")
            cursor.execute("""
                SELECT id, nom, unite, facteur
                FROM energies 
                ORDER BY nom
            """)
            
            energies = cursor.fetchall()
            for i, energie in enumerate(energies, 1):
                print(f"\n  ‚ö° √ânergie #{i} (ID: {energie[0]})")
                print(f"     Nom: {energie[1]}")
                print(f"     Unit√©: {energie[2]}")
                print(f"     Facteur: {energie[3]} kg CO‚ÇÇe/L")
        
        cursor.close()
        conn.close()
        
        print("\n‚úÖ V√©rification termin√©e !")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    check_vehicules_render()
