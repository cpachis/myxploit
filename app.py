from flask import Flask, render_template, request, jsonify, redirect, url_for, flash
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_cors import CORS
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from sqlalchemy import text
import os
import logging
from datetime import datetime, timedelta
from config import get_config
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Charger les variables d'environnement depuis .env
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ Variables d'environnement charg√©es depuis .env")
except ImportError:
    print("‚ö†Ô∏è Module python-dotenv non install√© - variables d'environnement syst√®me utilis√©es")

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('emissions.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Initialisation de Flask
app = Flask(__name__)

# Configuration
config = get_config()

# Forcer l'utilisation de la DATABASE_URL de Render en production
database_url = os.environ.get('DATABASE_URL')
if database_url:
    # Correction pour Render (postgres:// -> postgresql://)
    if database_url.startswith('postgres://'):
        database_url = database_url.replace('postgres://', 'postgresql://', 1)
    config.SQLALCHEMY_DATABASE_URI = database_url
    logger.info(f"üîß Configuration forc√©e: Base PostgreSQL d√©tect√©e - {database_url[:50]}...")
else:
    logger.warning("‚ö†Ô∏è DATABASE_URL non trouv√©e, utilisation de la configuration par d√©faut")

app.config.from_object(config)

# Initialisation des extensions
db = SQLAlchemy()
migrate = Migrate()
login_manager = LoginManager()

# Configuration des extensions
db.init_app(app)
migrate.init_app(app, db)
login_manager.init_app(app)
CORS(app)

# Configuration du login manager
login_manager.login_view = 'login'
login_manager.login_message = 'Veuillez vous connecter pour acc√©der √† cette page.'

@login_manager.user_loader
def load_user(user_id):
    """Charge un utilisateur depuis la base de donn√©es"""
    # Pour l'instant, retourner None (pas d'authentification)
    return None

@login_manager.request_loader
def load_user_from_request(request):
    """Charge un utilisateur depuis la requ√™te"""
    # Pour l'instant, retourner None (pas d'authentification)
    return None

# D√©finition des mod√®les directement dans app.py
class Transport(db.Model):
    """Mod√®le pour les transports"""
    __tablename__ = 'transports'
    
    id = db.Column(db.Integer, primary_key=True)
    ref = db.Column(db.String(50), unique=True, nullable=False)
    date = db.Column(db.Date, nullable=False)
    lieu_collecte = db.Column(db.String(200), nullable=False)
    lieu_livraison = db.Column(db.String(200), nullable=False)
    poids_tonnes = db.Column(db.Float, nullable=False)
    type_transport = db.Column(db.String(50), default='direct')  # direct ou indirect
    distance_km = db.Column(db.Float, default=0.0)
    emis_kg = db.Column(db.Float, default=0.0)
    emis_tkm = db.Column(db.Float, default=0.0)
    
    # Champs optionnels pour les calculs avanc√©s
    niveau_calcul = db.Column(db.String(50))
    type_vehicule = db.Column(db.String(50))
    energie = db.Column(db.String(50))
    conso_vehicule = db.Column(db.Float)
    client = db.Column(db.String(100))
    transporteur = db.Column(db.String(100))
    description = db.Column(db.Text)
    
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class Vehicule(db.Model):
    """Mod√®le pour les v√©hicules"""
    __tablename__ = 'vehicules'
    
    id = db.Column(db.Integer, primary_key=True)
    nom = db.Column(db.String(100), nullable=False)
    type = db.Column(db.String(50))
    energie_id = db.Column(db.Integer, db.ForeignKey('energies.id'))
    consommation = db.Column(db.Float)  # L/100km
    emissions = db.Column(db.Float)     # g CO2e/km
    charge_utile = db.Column(db.Float)  # tonnes
    description = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Relation avec l'√©nergie
    energie = db.relationship('Energie', backref='vehicules')

class Energie(db.Model):
    """Mod√®le pour les √©nergies"""
    __tablename__ = 'energies'
    
    id = db.Column(db.Integer, primary_key=True)
    nom = db.Column(db.String(100), nullable=False)
    identifiant = db.Column(db.String(50), unique=True)
    unite = db.Column(db.String(20), default='L')  # Unit√© de mesure (L, kg, kWh)
    facteur = db.Column(db.Float)       # kg CO2e/L (total)
    phase_amont = db.Column(db.Float, default=0.0)      # kg CO2e/L (phase amont)
    phase_fonctionnement = db.Column(db.Float, default=0.0)  # kg CO2e/L (phase fonctionnement)
    description = db.Column(db.Text)
    donnees_supplementaires = db.Column(db.JSON, default={})  # Donn√©es suppl√©mentaires en JSON
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class Invitation(db.Model):
    """Mod√®le pour les invitations de clients"""
    __tablename__ = 'invitations'
    
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), nullable=False)
    token = db.Column(db.String(100), unique=True, nullable=False)
    statut = db.Column(db.String(20), default='en_attente')  # en_attente, acceptee, refusee, expiree
    nom_entreprise = db.Column(db.String(100))
    nom_utilisateur = db.Column(db.String(100))
    date_invitation = db.Column(db.DateTime, default=datetime.utcnow)
    date_reponse = db.Column(db.DateTime)
    message_personnalise = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class User(db.Model):
    """Mod√®le pour les utilisateurs (clients et administrateurs)"""
    __tablename__ = 'users'
    
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    mot_de_passe = db.Column(db.String(255), nullable=False)
    nom = db.Column(db.String(100), nullable=False)
    nom_entreprise = db.Column(db.String(100))
    type_utilisateur = db.Column(db.String(20), default='client')  # 'client' ou 'admin'
    statut = db.Column(db.String(20), default='actif')
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    def check_password(self, password):
        """V√©rifier le mot de passe (simple comparaison pour l'instant)"""
        return self.mot_de_passe == password
    
    def get_id(self):
        """M√©thode requise par Flask-Login"""
        return str(self.id)

class Client(db.Model):
    """Mod√®le pour les clients"""
    __tablename__ = 'clients'
    
    id = db.Column(db.Integer, primary_key=True)
    nom = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    telephone = db.Column(db.String(20))
    adresse = db.Column(db.Text)
    siret = db.Column(db.String(14))
    site_web = db.Column(db.String(200))
    description = db.Column(db.Text)
    statut = db.Column(db.String(20), default='actif')  # actif, inactif
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class Transporteur(db.Model):
    """Mod√®le pour les transporteurs"""
    __tablename__ = 'transporteurs'
    
    id = db.Column(db.Integer, primary_key=True)
    nom = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    telephone = db.Column(db.String(20))
    adresse = db.Column(db.Text)
    siret = db.Column(db.String(14))
    site_web = db.Column(db.String(200))
    description = db.Column(db.Text)
    statut = db.Column(db.String(20), default='actif')  # actif, inactif
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

def calculer_distance_km(lieu_depart, lieu_arrivee):
    """Calcule la distance approximative entre deux lieux en km"""
    try:
        import requests
        
        # Utilisation de l'API OpenRouteService (gratuite avec cl√©)
        # En production, vous devriez utiliser votre propre cl√© API
        api_key = os.environ.get('OPENROUTE_API_KEY', '')
        
        if not api_key:
            # Si pas d'API key, utiliser des distances approximatives bas√©es sur des villes connues
            return calculer_distance_approximative(lieu_depart, lieu_arrivee)
        
        # G√©ocoder les lieux
        def geocoder(lieu):
            url = f"https://api.openrouteservice.org/geocode/search"
            params = {
                'api_key': api_key,
                'text': lieu,
                'size': 1
            }
            response = requests.get(url, params=params, timeout=5)
            if response.status_code == 200:
                data = response.json()
                if data.get('features'):
                    coords = data['features'][0]['geometry']['coordinates']
                    return coords[1], coords[0]  # lat, lon
            return None
        
        # Obtenir les coordonn√©es
        coords_depart = geocoder(lieu_depart)
        coords_arrivee = geocoder(lieu_arrivee)
        
        if not coords_depart or not coords_arrivee:
            return calculer_distance_approximative(lieu_depart, lieu_arrivee)
        
        # Calculer la distance avec l'API de routage
        url = "https://api.openrouteservice.org/v2/directions/driving-car"
        headers = {'Authorization': api_key}
        body = {
            'coordinates': [coords_depart[::-1], coords_arrivee[::-1]],  # [lon, lat]
            'units': 'km'
        }
        
        response = requests.post(url, json=body, headers=headers, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get('features'):
                distance = data['features'][0]['properties']['segments'][0]['distance']
                return round(distance, 1)
        
        # Fallback vers calcul approximatif
        return calculer_distance_approximative(lieu_depart, lieu_arrivee)
        
    except Exception as e:
        logger.warning(f"Erreur lors du calcul de distance: {str(e)}")
        return calculer_distance_approximative(lieu_depart, lieu_arrivee)

def calculer_distance_approximative(lieu_depart, lieu_arrivee):
    """Calcule une distance approximative bas√©e sur des villes connues"""
    # Base de donn√©es simplifi√©e de distances entre villes fran√ßaises principales
    distances_connues = {
        ('Paris', 'Lyon'): 463,
        ('Paris', 'Marseille'): 775,
        ('Paris', 'Toulouse'): 678,
        ('Paris', 'Nantes'): 385,
        ('Paris', 'Strasbourg'): 491,
        ('Paris', 'Montpellier'): 750,
        ('Paris', 'Bordeaux'): 584,
        ('Lyon', 'Marseille'): 314,
        ('Lyon', 'Toulouse'): 538,
        ('Lyon', 'Nantes'): 589,
        ('Marseille', 'Toulouse'): 404,
        ('Marseille', 'Montpellier'): 171,
        ('Toulouse', 'Bordeaux'): 245,
        ('Nantes', 'Bordeaux'): 340,
        ('Strasbourg', 'Lyon'): 493,
        ('Montpellier', 'Toulouse'): 240,
    }
    
    # Normaliser les noms de lieux
    def normaliser_lieu(lieu):
        lieu = lieu.lower().strip()
        # Extraire le nom de la ville principal
        for ville in ['paris', 'lyon', 'marseille', 'toulouse', 'nantes', 'strasbourg', 'montpellier', 'bordeaux']:
            if ville in lieu:
                return ville.title()
        return lieu.title()
    
    lieu_depart_norm = normaliser_lieu(lieu_depart)
    lieu_arrivee_norm = normaliser_lieu(lieu_arrivee)
    
    # Chercher la distance connue
    distance = distances_connues.get((lieu_depart_norm, lieu_arrivee_norm))
    if not distance:
        distance = distances_connues.get((lieu_arrivee_norm, lieu_depart_norm))
    
    if distance:
        return distance
    
    # Si pas de distance connue, estimation bas√©e sur la longueur des noms
    # (tr√®s approximatif, mais mieux que rien)
    return 200  # Distance par d√©faut

def calculer_emissions_carbone(distance_km, poids_tonnes, type_transport='direct'):
    """Calcule les √©missions carbone d'un transport"""
    # Facteurs d'√©mission par type de transport (kg CO2e par tonne-km)
    facteurs_emission = {
        'direct': 0.15,      # Transport routier direct
        'indirect': 0.25,    # Transport avec √©tapes (plus d'√©missions)
    }
    
    facteur = facteurs_emission.get(type_transport, 0.15)
    
    # Calcul des √©missions
    emis_kg = distance_km * poids_tonnes * facteur
    emis_tkm = emis_kg / (distance_km * poids_tonnes) if distance_km > 0 and poids_tonnes > 0 else 0
    
    return round(emis_kg, 2), round(emis_tkm, 3)

def envoyer_email(destinataire, sujet, contenu_html, contenu_texte=None):
    """Fonction pour envoyer des emails"""
    try:
        # Configuration email (√† adapter selon votre fournisseur)
        smtp_server = os.environ.get('SMTP_SERVER', 'smtp.gmail.com')
        smtp_port = int(os.environ.get('SMTP_PORT', '587'))
        email_emetteur = os.environ.get('EMAIL_EMETTEUR', 'noreply@myxploit.com')
        mot_de_passe = os.environ.get('EMAIL_PASSWORD', '')
        
        # Si pas de mot de passe configur√©, simuler l'envoi
        if not mot_de_passe:
            logger.info(f"üìß SIMULATION - Email √† {destinataire}: {sujet}")
            return True
        
        # Cr√©er le message
        msg = MIMEMultipart('alternative')
        msg['Subject'] = sujet
        msg['From'] = email_emetteur
        msg['To'] = destinataire
        
        # Ajouter le contenu texte et HTML
        if contenu_texte:
            msg.attach(MIMEText(contenu_texte, 'plain', 'utf-8'))
        msg.attach(MIMEText(contenu_html, 'html', 'utf-8'))
        
        # Envoyer l'email
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()
            server.login(email_emetteur, mot_de_passe)
            server.send_message(msg)
        
        logger.info(f"üìß Email envoy√© avec succ√®s √† {destinataire}: {sujet}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'envoi d'email √† {destinataire}: {str(e)}")
        return False

def envoyer_email_confirmation_client(client):
    """Envoyer un email de confirmation √† un nouveau client"""
    sujet = "Bienvenue chez MyXploit - Votre compte a √©t√© cr√©√©"
    
    contenu_html = f"""
    <html>
    <body>
        <h2>üéâ Bienvenue chez MyXploit !</h2>
        <p>Bonjour {client.nom},</p>
        <p>Votre compte client a √©t√© cr√©√© avec succ√®s sur notre plateforme MyXploit.</p>
        
        <h3>üìã Vos informations :</h3>
        <ul>
            <li><strong>Nom :</strong> {client.nom}</li>
            <li><strong>Email :</strong> {client.email}</li>
            <li><strong>T√©l√©phone :</strong> {client.telephone or 'Non renseign√©'}</li>
        </ul>
        
        <p>Vous pouvez maintenant acc√©der √† votre espace client et commencer √† g√©rer vos transports.</p>
        
        <p>Cordialement,<br>L'√©quipe MyXploit</p>
    </body>
    </html>
    """
    
    contenu_texte = f"""
    Bienvenue chez MyXploit !
    
    Bonjour {client.nom},
    
    Votre compte client a √©t√© cr√©√© avec succ√®s sur notre plateforme MyXploit.
    
    Vos informations :
    - Nom : {client.nom}
    - Email : {client.email}
    - T√©l√©phone : {client.telephone or 'Non renseign√©'}
    
    Vous pouvez maintenant acc√©der √† votre espace client et commencer √† g√©rer vos transports.
    
    Cordialement,
    L'√©quipe MyXploit
    """
    
    return envoyer_email(client.email, sujet, contenu_html, contenu_texte)

def envoyer_email_confirmation_transporteur(transporteur):
    """Envoyer un email de confirmation √† un nouveau transporteur"""
    sujet = "Bienvenue chez MyXploit - Votre compte transporteur a √©t√© cr√©√©"
    
    contenu_html = f"""
    <html>
    <body>
        <h2>üöö Bienvenue chez MyXploit !</h2>
        <p>Bonjour {transporteur.nom},</p>
        <p>Votre compte transporteur a √©t√© cr√©√© avec succ√®s sur notre plateforme MyXploit.</p>
        
        <h3>üìã Vos informations :</h3>
        <ul>
            <li><strong>Nom :</strong> {transporteur.nom}</li>
            <li><strong>Email :</strong> {transporteur.email}</li>
            <li><strong>T√©l√©phone :</strong> {transporteur.telephone or 'Non renseign√©'}</li>
        </ul>
        
        <p>Vous pouvez maintenant acc√©der √† votre espace transporteur et commencer √† g√©rer vos missions de transport.</p>
        
        <p>Cordialement,<br>L'√©quipe MyXploit</p>
    </body>
    </html>
    """
    
    contenu_texte = f"""
    Bienvenue chez MyXploit !
    
    Bonjour {transporteur.nom},
    
    Votre compte transporteur a √©t√© cr√©√© avec succ√®s sur notre plateforme MyXploit.
    
    Vos informations :
    - Nom : {transporteur.nom}
    - Email : {transporteur.email}
    - T√©l√©phone : {transporteur.telephone or 'Non renseign√©'}
    
    Vous pouvez maintenant acc√©der √† votre espace transporteur et commencer √† g√©rer vos missions de transport.
    
    Cordialement,
    L'√©quipe MyXploit
    """
    
    return envoyer_email(transporteur.email, sujet, contenu_html, contenu_texte)

def envoyer_email_invitation(invitation):
    """Envoyer un email d'invitation √† un nouveau client"""
    sujet = "Invitation √† rejoindre MyXploit - Plateforme de gestion des transports"
    
    # URL de base pour l'acceptation de l'invitation
    base_url = request.host_url.rstrip('/')
    url_acceptation = f"{base_url}/invitation/{invitation.token}"
    
    contenu_html = f"""
    <html>
    <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
        <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
            <div style="text-align: center; margin-bottom: 30px;">
                <h1 style="color: #2c3e50; margin-bottom: 10px;">üöõ MyXploit</h1>
                <p style="color: #7f8c8d; font-size: 18px;">Plateforme de gestion des transports</p>
            </div>
            
            <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
                <h2 style="color: #2c3e50; margin-top: 0;">üéâ Vous √™tes invit√© √† rejoindre MyXploit !</h2>
                
                <p>Bonjour,</p>
                
                <p>Vous avez √©t√© invit√© √† rejoindre la plateforme <strong>MyXploit</strong>, notre solution de gestion des transports et de suivi des √©missions CO2.</p>
                
                <p>Avec MyXploit, vous pourrez :</p>
                <ul style="color: #2c3e50;">
                    <li>üìä Suivre vos transports et √©missions CO2</li>
                    <li>üìà Analyser vos performances environnementales</li>
                    <li>ü§ù Collaborer avec vos partenaires logistiques</li>
                    <li>üìã G√©rer vos missions de transport efficacement</li>
                </ul>
                
                {f'<p><strong>Message personnalis√© :</strong><br><em style="color: #7f8c8d;">{invitation.message_personnalise}</em></p>' if invitation.message_personnalise else ''}
                
                <div style="text-align: center; margin: 30px 0;">
                    <a href="{url_acceptation}" 
                       style="background-color: #3498db; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; display: inline-block;">
                        ‚úÖ Accepter l'invitation
                    </a>
                </div>
                
                <p style="font-size: 14px; color: #7f8c8d;">
                    <strong>Note :</strong> Ce lien d'invitation est personnel et s√©curis√©. Ne le partagez pas avec d'autres personnes.
                </p>
            </div>
            
            <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #ecf0f1;">
                <p style="color: #7f8c8d; font-size: 14px;">
                    Si vous ne souhaitez pas rejoindre MyXploit, vous pouvez ignorer cet email.
                </p>
                <p style="color: #7f8c8d; font-size: 12px; margin-top: 20px;">
                    ¬© 2025 MyXploit - Plateforme de gestion des transports
                </p>
            </div>
        </div>
    </body>
    </html>
    """
    
    contenu_texte = f"""
    INVITATION √Ä REJOINDRE MYXPLOIT
    
    Bonjour,
    
    Vous avez √©t√© invit√© √† rejoindre la plateforme MyXploit, notre solution de gestion des transports et de suivi des √©missions CO2.
    
    Avec MyXploit, vous pourrez :
    - Suivre vos transports et √©missions CO2
    - Analyser vos performances environnementales
    - Collaborer avec vos partenaires logistiques
    - G√©rer vos missions de transport efficacement
    
    {f'Message personnalis√© : {invitation.message_personnalise}' if invitation.message_personnalise else ''}
    
    Pour accepter cette invitation, cliquez sur le lien suivant :
    {url_acceptation}
    
    Note : Ce lien d'invitation est personnel et s√©curis√©. Ne le partagez pas avec d'autres personnes.
    
    Si vous ne souhaitez pas rejoindre MyXploit, vous pouvez ignorer cet email.
    
    Cordialement,
    L'√©quipe MyXploit
    """
    
    return envoyer_email(invitation.email, sujet, contenu_html, contenu_texte)

# Initialiser la base de donn√©es APR√àS la d√©finition des mod√®les
with app.app_context():
    try:
        logger.info("üöÄ D√©marrage de l'initialisation de la base de donn√©es...")
        db.create_all()
        logger.info("‚úÖ Base de donn√©es initialis√©e avec succ√®s")
        
        # V√©rifier le type de base utilis√©e
        db_url = str(db.engine.url)
        logger.info(f"üîç URL de la base de donn√©es: {db_url}")
        
        if 'postgresql' in db_url:
            logger.info("üêò Base PostgreSQL confirm√©e")
        elif 'sqlite' in db_url:
            logger.warning("‚ö†Ô∏è ATTENTION: Base SQLite d√©tect√©e au lieu de PostgreSQL!")
        else:
            logger.info(f"üìä Type de base: {db_url}")
        
        # Migration automatique pour ajouter les colonnes manquantes
        try:
            logger.info("üîß V√©rification de la structure de la table 'energies'...")
            
            # V√©rifier si les colonnes existent d√©j√†
            with db.engine.connect() as conn:
                # Pour PostgreSQL
                if 'postgresql' in str(db.engine.url):
                    logger.info("üêò Base PostgreSQL d√©tect√©e - v√©rification des colonnes...")
                    
                    # Forcer l'ajout des colonnes manquantes (avec gestion d'erreur)
                    columns_to_add = [
                        ('phase_amont', 'FLOAT DEFAULT 0.0'),
                        ('phase_fonctionnement', 'FLOAT DEFAULT 0.0'),
                        ('donnees_supplementaires', 'JSONB DEFAULT \'{}\'')
                    ]
                    
                    # Colonnes pour la table v√©hicules
                    vehicules_columns_to_add = [
                        ('energie_id', 'INTEGER REFERENCES energies(id)'),
                        ('description', 'TEXT')
                    ]
                    
                    for column_name, column_definition in columns_to_add:
                        try:
                            # V√©rifier si la colonne existe
                            result = conn.execute(text(f"""
                                SELECT column_name 
                                FROM information_schema.columns 
                                WHERE table_name = 'energies' 
                                AND column_name = '{column_name}'
                            """))
                            
                            if not result.fetchone():
                                logger.info(f"‚ûï Ajout de la colonne '{column_name}'...")
                                conn.execute(text(f"ALTER TABLE energies ADD COLUMN {column_name} {column_definition}"))
                                conn.commit()
                                logger.info(f"‚úÖ Colonne '{column_name}' ajout√©e")
                            else:
                                logger.info(f"‚úÖ Colonne '{column_name}' existe d√©j√†")
                                
                        except Exception as col_error:
                            if "already exists" in str(col_error).lower() or "duplicate column" in str(col_error).lower():
                                logger.info(f"‚ÑπÔ∏è Colonne '{column_name}' existe d√©j√† (erreur ignor√©e)")
                            else:
                                logger.warning(f"‚ö†Ô∏è Erreur avec la colonne '{column_name}': {str(col_error)}")
                    
                    # Migration pour la table v√©hicules
                    logger.info("üîß V√©rification de la structure de la table 'vehicules'...")
                    for column_name, column_definition in vehicules_columns_to_add:
                        try:
                            # V√©rifier si la colonne existe
                            result = conn.execute(text(f"""
                                SELECT column_name 
                                FROM information_schema.columns 
                                WHERE table_name = 'vehicules' 
                                AND column_name = '{column_name}'
                            """))
                            
                            if not result.fetchone():
                                logger.info(f"‚ûï Ajout de la colonne '{column_name}' √† la table vehicules...")
                                conn.execute(text(f"ALTER TABLE vehicules ADD COLUMN {column_name} {column_definition}"))
                                conn.commit()
                                logger.info(f"‚úÖ Colonne '{column_name}' ajout√©e √† vehicules")
                            else:
                                logger.info(f"‚úÖ Colonne '{column_name}' existe d√©j√† dans vehicules")
                                
                        except Exception as col_error:
                            if "already exists" in str(col_error).lower() or "duplicate column" in str(col_error).lower():
                                logger.info(f"‚ÑπÔ∏è Colonne '{column_name}' existe d√©j√† dans vehicules (erreur ignor√©e)")
                            else:
                                logger.warning(f"‚ö†Ô∏è Erreur avec la colonne '{column_name}' dans vehicules: {str(col_error)}")
                    
                    logger.info("üéâ Migration automatique termin√©e avec succ√®s !")
                else:
                    logger.info("üì± Base SQLite d√©tect√©e - pas de migration n√©cessaire")
                    
        except Exception as migration_error:
            logger.warning(f"‚ö†Ô∏è Migration automatique √©chou√©e (non critique): {str(migration_error)}")
            logger.info("‚ÑπÔ∏è L'application continuera sans les nouvelles colonnes")
        
        # Migration pour ajouter les nouvelles colonnes au mod√®le Transport
        try:
            logger.info("üîß Migration du mod√®le Transport...")
            
            # D√©tecter le type de base de donn√©es
            db_url = str(db.engine.url)
            is_postgresql = 'postgresql' in db_url
            
            if is_postgresql:
                logger.info("üêò Migration PostgreSQL d√©tect√©e")
                # Pour PostgreSQL, utiliser information_schema
                result = db.session.execute(text("""
                    SELECT column_name 
                    FROM information_schema.columns 
                    WHERE table_name = 'transports' AND table_schema = 'public'
                """))
                columns = [row[0] for row in result.fetchall()]
            else:
                logger.info("üì± Migration SQLite d√©tect√©e")
                # Pour SQLite, utiliser PRAGMA
                result = db.session.execute(text("PRAGMA table_info(transports)"))
                columns = [row[1] for row in result.fetchall()]
            
            logger.info(f"üìã Colonnes existantes: {columns}")
            
            # Ajouter les colonnes manquantes
            if 'date' not in columns:
                if is_postgresql:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN date DATE"))
                else:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN date DATE"))
                logger.info("‚úÖ Colonne 'date' ajout√©e")
            
            if 'lieu_collecte' not in columns:
                if is_postgresql:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN lieu_collecte VARCHAR(200)"))
                else:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN lieu_collecte VARCHAR(200)"))
                logger.info("‚úÖ Colonne 'lieu_collecte' ajout√©e")
            
            if 'lieu_livraison' not in columns:
                if is_postgresql:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN lieu_livraison VARCHAR(200)"))
                else:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN lieu_livraison VARCHAR(200)"))
                logger.info("‚úÖ Colonne 'lieu_livraison' ajout√©e")
            
            if 'poids_tonnes' not in columns:
                if is_postgresql:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN poids_tonnes REAL"))
                else:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN poids_tonnes FLOAT"))
                logger.info("‚úÖ Colonne 'poids_tonnes' ajout√©e")
            
            if 'type_transport' not in columns:
                if is_postgresql:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN type_transport VARCHAR(50) DEFAULT 'direct'"))
                else:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN type_transport VARCHAR(50) DEFAULT 'direct'"))
                logger.info("‚úÖ Colonne 'type_transport' ajout√©e")
            
            if 'distance_km' not in columns:
                if is_postgresql:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN distance_km REAL DEFAULT 0.0"))
                else:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN distance_km FLOAT DEFAULT 0.0"))
                logger.info("‚úÖ Colonne 'distance_km' ajout√©e")
            
            if 'emis_kg' not in columns:
                if is_postgresql:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN emis_kg REAL DEFAULT 0.0"))
                else:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN emis_kg FLOAT DEFAULT 0.0"))
                logger.info("‚úÖ Colonne 'emis_kg' ajout√©e")
            
            if 'emis_tkm' not in columns:
                if is_postgresql:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN emis_tkm REAL DEFAULT 0.0"))
                else:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN emis_tkm FLOAT DEFAULT 0.0"))
                logger.info("‚úÖ Colonne 'emis_tkm' ajout√©e")
            
            if 'client' not in columns:
                if is_postgresql:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN client VARCHAR(100)"))
                else:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN client VARCHAR(100)"))
                logger.info("‚úÖ Colonne 'client' ajout√©e")
            
            if 'transporteur' not in columns:
                if is_postgresql:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN transporteur VARCHAR(100)"))
                else:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN transporteur VARCHAR(100)"))
                logger.info("‚úÖ Colonne 'transporteur' ajout√©e")
            
            if 'description' not in columns:
                if is_postgresql:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN description TEXT"))
                else:
                    db.session.execute(text("ALTER TABLE transports ADD COLUMN description TEXT"))
                logger.info("‚úÖ Colonne 'description' ajout√©e")
            
            db.session.commit()
            logger.info("‚úÖ Migration du mod√®le Transport termin√©e avec succ√®s")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la migration du mod√®le Transport: {str(e)}")
            db.session.rollback()
        
        logger.info("‚úÖ Initialisation de la base de donn√©es termin√©e avec succ√®s")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur critique lors de l'initialisation de la base: {str(e)}")
        logger.error(f"‚ùå Type d'erreur: {type(e).__name__}")
        # Ne pas lever l'erreur pour permettre le d√©marrage
        logger.info("‚ÑπÔ∏è L'application tentera de continuer malgr√© l'erreur")

# Les mod√®les sont maintenant d√©finis directement dans app.py
# Plus besoin d'importer transport_api

@app.route('/')
def index():
    """Page d'accueil"""
    try:
        return render_template('index.html')
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'affichage de l'index: {str(e)}")
        return f"""
        <html>
        <head><title>MyXploit - Statut</title></head>
        <body>
            <h1>üöÄ MyXploit - Application en cours de d√©marrage</h1>
            <p>L'application est en cours d'initialisation...</p>
            <p>Erreur: {str(e)}</p>
            <p><a href="/health">V√©rifier le statut</a></p>
        </body>
        </html>
        """, 500

@app.route('/myxploit')
def myxploit_home():
    """Page d'accueil MyXploit (c√¥t√© client)"""
    try:
        return render_template('myxploit_home.html')
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage de l'accueil MyXploit: {str(e)}")
        return render_template('error.html', error=str(e)), 500

@app.route('/administration')
def administration_home():
    """Page d'accueil Administration (c√¥t√© admin)"""
    try:
        return render_template('administration_home.html')
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage de l'accueil Administration: {str(e)}")
        return render_template('error.html', error=str(e)), 500

@app.route('/dashboard')
def dashboard():
    """Dashboard principal"""
    try:
        # R√©cup√©rer les statistiques
        total_transports = Transport.query.count()
        total_clients = 0
        if hasattr(Transport, 'client_id'):
            try:
                result = db.session.query(db.func.count(db.distinct(Transport.client_id))).scalar()
                total_clients = result if result is not None else 0
            except Exception:
                total_clients = 0
        
        logger.info(f"Affichage du dashboard - {total_transports} transports")
        
        return render_template('dashboard.html', 
                            total_transports=total_transports,
                            total_clients=total_clients)
                        
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage du dashboard: {str(e)}")
        return render_template('error.html', error=str(e)), 500

@app.route('/api/dashboard', methods=['GET'])
def api_dashboard():
    """API pour r√©cup√©rer les donn√©es du dashboard"""
    try:
        # Simulation de donn√©es de dashboard
        dashboard_data = {
            'statistiques': {
                'total_transports': 25,
                'transports_ce_mois': 8,
                'emissions_total': 1250.5,
                'emissions_ce_mois': 320.8,
                'clients_actifs': 12,
                'transporteurs_actifs': 6
            },
            'graphiques': {
                'emissions_par_mois': [
                    {'mois': 'Jan', 'emissions': 280.5},
                    {'mois': 'F√©v', 'emissions': 320.8},
                    {'mois': 'Mar', 'emissions': 295.2},
                    {'mois': 'Avr', 'emissions': 354.0}
                ],
                'transports_par_type': [
                    {'type': 'Routier', 'nombre': 15},
                    {'type': 'Ferroviaire', 'nombre': 5},
                    {'type': 'Maritime', 'nombre': 3},
                    {'type': 'A√©rien', 'nombre': 2}
                ]
            },
            'transports_recents': [
                {
                    'id': 1,
                    'reference': 'TR-001',
                    'date': '2024-01-15',
                    'client': 'Client Test 1',
                    'emissions': 45.5,
                    'statut': 'termin√©'
                },
                {
                    'id': 2,
                    'reference': 'TR-002',
                    'date': '2024-01-16',
                    'client': 'Client Test 2',
                    'emissions': 78.2,
                    'statut': 'en_cours'
                }
            ]
        }
        
        return jsonify({
            'success': True,
            'dashboard': dashboard_data
        })
        
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des donn√©es du dashboard: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/transports')
def transports():
    """Liste des transports (ancienne version)"""
    try:
        # R√©cup√©rer tous les transports
        transports = Transport.query.all()
        
        # R√©cup√©rer les v√©hicules et √©nergies pour l'affichage
        vehicules = {v.id: v for v in Vehicule.query.all()}
        energies = {e.id: e for e in Energie.query.all()}
        
        logger.info(f"Affichage de {len(transports)} transports")
        
        return render_template('liste_transports.html', 
                            transports=transports,
                            vehicules=vehicules,
                            energies=energies,
                            clients={})
                        
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage des transports: {str(e)}")
        # Rediriger vers la nouvelle page si erreur avec l'ancienne
        return redirect(url_for('mes_transports'))

@app.route('/mes_transports')
def mes_transports():
    """Page de gestion des transports (nouvelle version)"""
    try:
        return render_template('mes_transports.html')
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage de la page mes transports: {str(e)}")
        return render_template('error.html', error=str(e)), 500

@app.route('/api/vehicules', methods=['GET', 'POST'])
def api_vehicules():
    """API pour r√©cup√©rer et cr√©er des v√©hicules"""
    if request.method == 'GET':
        try:
            vehicules = Vehicule.query.all()
            vehicules_data = []
            
            for v in vehicules:
                # R√©cup√©rer le nom de l'√©nergie si elle existe
                energie_nom = None
                if v.energie_id and v.energie:
                    energie_nom = v.energie.nom
                
                vehicules_data.append({
                    'id': v.id,
                    'nom': v.nom,
                    'type': v.type,
                    'energie_id': v.energie_id,
                    'energie_nom': energie_nom,
                    'consommation': v.consommation,
                    'emissions': v.emissions,
                    'charge_utile': v.charge_utile,
                    'description': v.description
                })
            
            return jsonify({
                'success': True,
                'vehicules': vehicules_data
            })
        
        except Exception as e:
            logger.error(f"Erreur API v√©hicules GET: {str(e)}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    elif request.method == 'POST':
        """Cr√©er un nouveau v√©hicule"""
        try:
            logger.info("=== CR√âATION DE V√âHICULE ===")
            
            data = request.get_json()
            logger.info(f"üì• Donn√©es re√ßues: {data}")
            
            # Validation des donn√©es
            if not data:
                return jsonify({'success': False, 'error': 'Donn√©es JSON manquantes'}), 400
                
            if not data.get('nom'):
                return jsonify({'success': False, 'error': 'Nom du v√©hicule requis'}), 400
            
            # Cr√©er le v√©hicule
            nouveau_vehicule = Vehicule(
                nom=data['nom'],
                type=data.get('type', 'PORTEUR'),
                energie_id=data.get('energie_id'),
                charge_utile=float(data.get('capacite', 0)),
                consommation=float(data.get('consommation', 0)),
                emissions=float(data.get('emissions', 0)),
                description=data.get('description', '')
            )
            
            db.session.add(nouveau_vehicule)
            db.session.commit()
            
            logger.info(f"‚úÖ V√©hicule cr√©√© avec succ√®s: {nouveau_vehicule.id}")
            
            return jsonify({
                'success': True,
                'message': 'V√©hicule cr√©√© avec succ√®s',
                'vehicule': {
                    'id': nouveau_vehicule.id,
                    'nom': nouveau_vehicule.nom,
                    'type': nouveau_vehicule.type,
                    'energie_id': nouveau_vehicule.energie_id,
                    'consommation': nouveau_vehicule.consommation,
                    'emissions': nouveau_vehicule.emissions,
                    'charge_utile': nouveau_vehicule.charge_utile,
                    'description': nouveau_vehicule.description
                }
            })
            
        except Exception as e:
            logger.error(f"Erreur cr√©ation v√©hicule: {str(e)}")
            db.session.rollback()
            return jsonify({
                'success': False,
                'error': f'Erreur lors de la cr√©ation: {str(e)}'
            }), 500

@app.route('/api/vehicules/<int:vehicule_id>', methods=['PUT', 'DELETE'])
def api_vehicule_detail(vehicule_id):
    """API pour modifier et supprimer un v√©hicule sp√©cifique"""
    try:
        vehicule = Vehicule.query.get(vehicule_id)
        if not vehicule:
            return jsonify({'success': False, 'error': 'V√©hicule non trouv√©'}), 404
        
        if request.method == 'PUT':
            """Modifier un v√©hicule"""
            data = request.get_json()
            logger.info(f"üìù Modification v√©hicule {vehicule_id}: {data}")
            
            if data.get('nom'):
                vehicule.nom = data['nom']
            if data.get('type'):
                vehicule.type = data['type']
            if data.get('energie_id') is not None:
                vehicule.energie_id = data['energie_id']
            if data.get('capacite') is not None:
                vehicule.charge_utile = float(data['capacite'])
            if data.get('consommation') is not None:
                vehicule.consommation = float(data['consommation'])
            if data.get('emissions') is not None:
                vehicule.emissions = float(data['emissions'])
            if data.get('description') is not None:
                vehicule.description = data['description']
            
            db.session.commit()
            logger.info(f"‚úÖ V√©hicule {vehicule_id} modifi√© avec succ√®s")
            
            return jsonify({
                'success': True,
                'message': 'V√©hicule modifi√© avec succ√®s'
            })
        
        elif request.method == 'DELETE':
            """Supprimer un v√©hicule"""
            db.session.delete(vehicule)
            db.session.commit()
            logger.info(f"‚úÖ V√©hicule {vehicule_id} supprim√© avec succ√®s")
            
            return jsonify({
                'success': True,
                'message': 'V√©hicule supprim√© avec succ√®s'
            })
    
    except Exception as e:
        logger.error(f"Erreur API v√©hicule {vehicule_id}: {str(e)}")
        db.session.rollback()
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/energies')
def api_energies():
    """API pour r√©cup√©rer les √©nergies"""
    try:
        energies = Energie.query.all()
        energies_data = []
        
        for e in energies:
            energies_data.append({
                'id': e.id,
                'nom': e.nom,
                'identifiant': e.identifiant,
                'unite': e.unite,
                'facteur': e.facteur,
                'description': e.description,
                'phase_amont': getattr(e, 'phase_amont', 0.0),
                'phase_fonctionnement': getattr(e, 'phase_fonctionnement', 0.0),
                'donnees_supplementaires': getattr(e, 'donnees_supplementaires', {})
            })
        
        return jsonify({
            'success': True,
            'energies': energies_data
        })
    
    except Exception as e:
        logger.error(f"Erreur API √©nergies: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/administration')
def administration():
    """Page d'administration"""
    try:
        return render_template('administration.html')
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage de l'administration: {str(e)}")
        return render_template('error.html', error=str(e)), 500

@app.route('/parametrage_clients')
def parametrage_clients():
    """Page de param√©trage des clients"""
    try:
        return render_template('clients.html')
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage des clients: {str(e)}")
        return render_template('error.html', error=str(e)), 500

@app.route('/parametrage_energies')
def parametrage_energies():
    """Page de param√©trage des √©nergies"""
    try:
        # R√©cup√©rer toutes les √©nergies pour l'affichage
        energies = Energie.query.all()
        return render_template('parametrage_energies.html', energies=energies)
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage des √©nergies: {str(e)}")
        return render_template('error.html', error=str(e)), 500

@app.route('/api/energies', methods=['POST'])
def creer_energie():
    """Cr√©er une nouvelle √©nergie"""
    try:
        logger.info("=== CR√âATION D'√âNERGIE ===")
        
        data = request.get_json()
        logger.info(f"üì• JSON pars√©: {data}")
        logger.info(f"üìä Type de donn√©es: {type(data)}")
        
        # Validation des donn√©es
        if not data:
            logger.error("‚ùå Donn√©es JSON manquantes ou invalides")
            return jsonify({'success': False, 'error': 'Donn√©es JSON manquantes ou invalides'}), 400
            
        if not data.get('nom') or not data.get('identifiant'):
            logger.error(f"‚ùå Validation √©chou√©e - nom: '{data.get('nom')}', identifiant: '{data.get('identifiant')}'")
            return jsonify({'success': False, 'error': 'Nom et identifiant requis'}), 400
        
        # V√©rifier si l'identifiant existe d√©j√†
        logger.info(f"üîç V√©rification de l'identifiant: {data['identifiant']}")
        energie_existante = Energie.query.filter_by(identifiant=data['identifiant']).first()
        if energie_existante:
            logger.error(f"‚ùå Identifiant d√©j√† existant: {data['identifiant']} (ID: {energie_existante.id})")
            return jsonify({'success': False, 'error': 'Cet identifiant existe d√©j√†'}), 400
        else:
            logger.info(f"‚úÖ Identifiant disponible: {data['identifiant']}")
        
        # Validation des types de donn√©es
        try:
            unite = data.get('unite', 'L')
            logger.info(f"üîç Unit√©: '{unite}' (type: {type(unite)})")
            
            facteur = None
            if data.get('facteur') is not None:
                facteur = float(data.get('facteur'))
                logger.info(f"üîç Facteur: {facteur} (type: {type(facteur)})")
            else:
                logger.info("üîç Facteur: None (non fourni)")
            
            description = data.get('description', '')
            logger.info(f"üîç Description: '{description}' (type: {type(description)})")
            
        except (ValueError, TypeError) as e:
            logger.error(f"‚ùå Erreur de conversion de type: {str(e)}")
            return jsonify({'success': False, 'error': f'Type de donn√©es invalide: {str(e)}'}), 400
        
        # Cr√©er la nouvelle √©nergie
        logger.info(f"üèóÔ∏è Cr√©ation de l'√©nergie avec les donn√©es valid√©es:")
        logger.info(f"   - nom: {data['nom']}")
        logger.info(f"   - identifiant: {data['identifiant']}")
        logger.info(f"   - unite: {unite}")
        logger.info(f"   - facteur: {facteur}")
        logger.info(f"   - description: {description}")
        
        nouvelle_energie = Energie(
            nom=data['nom'],
            identifiant=data['identifiant'],
            unite=unite,
            facteur=facteur,
            description=description
        )
        
        logger.info(f"üìù Objet √©nergie cr√©√©: {nouvelle_energie.nom} (ID: {nouvelle_energie.id})")
        logger.info(f"üìä Attributs de l'objet:")
        logger.info(f"   - nom: {nouvelle_energie.nom}")
        logger.info(f"   - identifiant: {nouvelle_energie.identifiant}")
        logger.info(f"   - unite: {nouvelle_energie.unite}")
        logger.info(f"   - facteur: {nouvelle_energie.facteur}")
        logger.info(f"   - description: {nouvelle_energie.description}")
        
        # V√©rifier la validit√© de l'objet avant l'ajout
        try:
            db.session.add(nouvelle_energie)
            logger.info("‚úÖ Objet ajout√© √† la session")
            
            # V√©rifier que l'objet est valide
            db.session.flush()
            logger.info("‚úÖ Objet valid√© par la base de donn√©es")
            
            db.session.commit()
            logger.info(f"üíæ √ânergie sauvegard√©e en base avec l'ID: {nouvelle_energie.id}")
            
        except Exception as db_error:
            logger.error(f"‚ùå Erreur lors de la sauvegarde en base: {str(db_error)}")
            logger.error(f"‚ùå Type d'erreur: {type(db_error).__name__}")
            db.session.rollback()
            return jsonify({'success': False, 'error': f'Erreur de base de donn√©es: {str(db_error)}'}), 500
        
        logger.info(f"‚úÖ Nouvelle √©nergie cr√©√©e: {nouvelle_energie.nom}")
        return jsonify({
            'success': True, 
            'message': '√ânergie cr√©√©e avec succ√®s',
            'energie_id': nouvelle_energie.id,
            'id': nouvelle_energie.id
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation de l'√©nergie: {str(e)}")
        logger.error(f"‚ùå Type d'erreur: {type(e).__name__}")
        logger.error(f"‚ùå D√©tails de l'erreur: {str(e)}")
        
        try:
            db.session.rollback()
            logger.info("‚úÖ Rollback effectu√©")
        except Exception as rollback_error:
            logger.error(f"‚ùå Erreur lors du rollback: {str(rollback_error)}")
        
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/energies/<int:energie_id>', methods=['PUT'])
def modifier_energie(energie_id):
    """Modifier une √©nergie existante"""
    try:
        energie = Energie.query.get_or_404(energie_id)
        data = request.get_json()
        
        # Validation des donn√©es
        if not data.get('nom'):
            return jsonify({'success': False, 'error': 'Nom requis'}), 400
        
        # V√©rifier si l'identifiant existe d√©j√† (sauf pour cette √©nergie)
        if data.get('identifiant') and data['identifiant'] != energie.identifiant:
            if Energie.query.filter_by(identifiant=data['identifiant']).first():
                return jsonify({'success': False, 'error': 'Cet identifiant existe d√©j√†'}), 400
        
        # Mettre √† jour l'√©nergie
        energie.nom = data['nom']
        if data.get('identifiant'):
            energie.identifiant = data['identifiant']
        if data.get('unite'):
            energie.unite = data['unite']
        if data.get('facteur') is not None:
            energie.facteur = float(data['facteur'])
        energie.description = data.get('description', '')
        
        db.session.commit()
        
        logger.info(f"‚úÖ √ânergie modifi√©e: {energie.nom}")
        return jsonify({'success': True, 'message': '√ânergie modifi√©e avec succ√®s'})
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la modification de l'√©nergie: {str(e)}")
        db.session.rollback()
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/energies/<int:energie_id>', methods=['DELETE'])
def supprimer_energie(energie_id):
    """Supprimer une √©nergie"""
    try:
        energie = Energie.query.get_or_404(energie_id)
        
        # V√©rifier si l'√©nergie est utilis√©e dans des transports
        transports_utilisant_energie = Transport.query.filter_by(energie=str(energie_id)).count()
        if transports_utilisant_energie > 0:
            return jsonify({
                'success': False, 
                'error': f'Cette √©nergie est utilis√©e par {transports_utilisant_energie} transport(s). Impossible de la supprimer.'
            }), 400
        
        nom_energie = energie.nom
        db.session.delete(energie)
        db.session.commit()
        
        logger.info(f"‚úÖ √ânergie supprim√©e: {nom_energie}")
        return jsonify({'success': True, 'message': '√ânergie supprim√©e avec succ√®s'})
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la suppression de l'√©nergie: {str(e)}")
        db.session.rollback()
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/energies/<int:energie_id>/facteurs', methods=['PUT'])
def modifier_facteurs_energie(energie_id):
    """Modifier les facteurs d'√©mission d'une √©nergie"""
    try:
        energie = Energie.query.get_or_404(energie_id)
        data = request.get_json()
        
        # Validation des donn√©es
        if not data:
            return jsonify({'success': False, 'error': 'Donn√©es manquantes'}), 400
        
        # Mettre √† jour les facteurs avec gestion d'erreur robuste
        try:
            if 'phase_amont' in data:
                if hasattr(energie, 'phase_amont'):
                    energie.phase_amont = float(data['phase_amont'])
                else:
                    logger.warning("‚ö†Ô∏è Colonne 'phase_amont' non disponible")
            
            if 'phase_fonctionnement' in data:
                if hasattr(energie, 'phase_fonctionnement'):
                    energie.phase_fonctionnement = float(data['phase_fonctionnement'])
                else:
                    logger.warning("‚ö†Ô∏è Colonne 'phase_fonctionnement' non disponible")
            
            if 'total' in data:
                energie.facteur = float(data['total'])
            
            # Mettre √† jour les donn√©es suppl√©mentaires
            if 'donnees_supplementaires' in data:
                if hasattr(energie, 'donnees_supplementaires'):
                    energie.donnees_supplementaires = data['donnees_supplementaires']
                else:
                    logger.warning("‚ö†Ô∏è Colonne 'donnees_supplementaires' non disponible")
                    
        except AttributeError as attr_error:
            logger.warning(f"‚ö†Ô∏è Colonne non disponible: {str(attr_error)}")
            # Continuer avec les colonnes disponibles
        except ValueError as val_error:
            logger.error(f"‚ùå Erreur de conversion de valeur: {str(val_error)}")
            return jsonify({'success': False, 'error': f'Valeur invalide: {str(val_error)}'}), 400
        
        db.session.commit()
        
        logger.info(f"‚úÖ Facteurs mis √† jour pour l'√©nergie {energie.nom}")
        return jsonify({
            'success': True, 
            'message': 'Facteurs mis √† jour avec succ√®s',
            'energie': {
                'id': energie.id,
                'nom': energie.nom,
                'phase_amont': getattr(energie, 'phase_amont', 0),
                'phase_fonctionnement': getattr(energie, 'phase_fonctionnement', 0),
                'total': energie.facteur,
                'donnees_supplementaires': getattr(energie, 'donnees_supplementaires', {})
            }
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la mise √† jour des facteurs: {str(e)}")
        db.session.rollback()
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/energies/<int:energie_id>/donnees', methods=['POST'])
def ajouter_donnee_energie(energie_id):
    """Ajouter une nouvelle donn√©e √† une √©nergie"""
    try:
        energie = Energie.query.get_or_404(energie_id)
        data = request.get_json()
        
        # Validation des donn√©es
        if not data.get('nom') or data.get('valeur') is None:
            return jsonify({'success': False, 'error': 'Nom et valeur requis'}), 400
        
        # R√©cup√©rer ou cr√©er les donn√©es suppl√©mentaires
        donnees_supp = getattr(energie, 'donnees_supplementaires', {}) or {}
        
        # Ajouter la nouvelle donn√©e
        donnees_supp[data['nom']] = {
            'valeur': float(data['valeur']),
            'unite': data.get('unite', 'kg √©q. CO‚ÇÇ'),
            'description': data.get('description', ''),
            'date_ajout': datetime.utcnow().isoformat()
        }
        
        # Mettre √† jour l'√©nergie
        energie.donnees_supplementaires = donnees_supp
        db.session.commit()
        
        logger.info(f"‚úÖ Donn√©e ajout√©e √† l'√©nergie {energie.nom}: {data['nom']}")
        return jsonify({
            'success': True,
            'message': 'Donn√©e ajout√©e avec succ√®s',
            'donnee': donnees_supp[data['nom']]
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'ajout de la donn√©e: {str(e)}")
        db.session.rollback()
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/energies/<int:energie_id>/donnees/<nom_donnee>', methods=['DELETE'])
def supprimer_donnee_energie(energie_id, nom_donnee):
    """Supprimer une donn√©e d'une √©nergie"""
    try:
        energie = Energie.query.get_or_404(energie_id)
        
        # R√©cup√©rer les donn√©es suppl√©mentaires
        donnees_supp = getattr(energie, 'donnees_supplementaires', {}) or {}
        
        if nom_donnee not in donnees_supp:
            return jsonify({'success': False, 'error': 'Donn√©e non trouv√©e'}), 404
        
        # Supprimer la donn√©e
        del donnees_supp[nom_donnee]
        energie.donnees_supplementaires = donnees_supp
        db.session.commit()
        
        logger.info(f"‚úÖ Donn√©e supprim√©e de l'√©nergie {energie.nom}: {nom_donnee}")
        return jsonify({'success': True, 'message': 'Donn√©e supprim√©e avec succ√®s'})
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la suppression de la donn√©e: {str(e)}")
        db.session.rollback()
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/parametrage_vehicules')
def parametrage_vehicules():
    """Page de param√©trage des v√©hicules"""
    try:
        return render_template('parametrage_vehicules.html')
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage des v√©hicules: {str(e)}")
        return render_template('error.html', error=str(e)), 500



@app.route('/import_csv')
def import_csv():
    """Page d'import CSV"""
    try:
        return render_template('import_csv.html')
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage de l'import CSV: {str(e)}")
        return render_template('error.html', error=str(e)), 500

@app.route('/nouveau_transport')
def nouveau_transport():
    """Page de s√©lection du mode de cr√©ation de transport"""
    try:
        return render_template('nouveau_transport.html')
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage du choix de cr√©ation: {str(e)}")
        return render_template('error.html', error=str(e)), 500

@app.route('/transport')
@app.route('/transport/<int:transport_id>')
def transport(transport_id=None):
    """Page de cr√©ation/modification d'un transport"""
    try:
        transport = None
        if transport_id:
            transport = Transport.query.get_or_404(transport_id)
        
        # R√©cup√©rer les v√©hicules et √©nergies pour le formulaire
        vehicules = Vehicule.query.all()
        energies = Energie.query.all()
        
        return render_template('transport.html', 
                            transport=transport,
                            vehicules=vehicules,
                            energies=energies)
                            
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage du transport: {str(e)}")
        return render_template('error.html', error=str(e)), 500

@app.route('/import_transports_csv', methods=['POST'])
def import_transports_csv():
    """Import de transports depuis un fichier CSV"""
    try:
        if 'file' not in request.files:
            return jsonify({'success': False, 'error': 'Aucun fichier s√©lectionn√©'}), 400
        
        file = request.files['file']
        if file.filename == '':
            return jsonify({'success': False, 'error': 'Aucun fichier s√©lectionn√©'}), 400
        
        if not file.filename.endswith('.csv'):
            return jsonify({'success': False, 'error': 'Le fichier doit √™tre au format CSV'}), 400
        
        # Lire le fichier CSV
        import csv
        from io import StringIO
        
        # D√©coder le contenu du fichier
        content = file.read().decode('utf-8')
        csv_reader = csv.DictReader(StringIO(content))
        
        transports_crees = 0
        erreurs = 0
        resultats = []
        
        for row in csv_reader:
            try:
                # Validation des donn√©es obligatoires
                if not row.get('ref') or not row.get('type_transport') or not row.get('niveau_calcul'):
                    erreurs += 1
                    resultats.append({'ref': row.get('ref', 'N/A'), 'error': 'Donn√©es obligatoires manquantes'})
                    continue
                
                # V√©rifier si la r√©f√©rence existe d√©j√†
                if Transport.query.filter_by(ref=row['ref']).first():
                    erreurs += 1
                    resultats.append({'ref': row['ref'], 'error': 'R√©f√©rence d√©j√† existante'})
                    continue
                
                # Cr√©er le transport
                nouveau_transport = Transport(
                    ref=row['ref'],
                    type_transport=row['type_transport'],
                    niveau_calcul=row['niveau_calcul'],
                    type_vehicule=row.get('type_vehicule'),
                    energie=row.get('energie'),
                    conso_vehicule=float(row['conso_vehicule']) if row.get('conso_vehicule') else None,
                    poids_tonnes=float(row['poids_tonnes']) if row.get('poids_tonnes') else None,
                    distance_km=float(row['distance_km']) if row.get('distance_km') else None
                )
                
                db.session.add(nouveau_transport)
                transports_crees += 1
                resultats.append({'ref': row['ref'], 'success': True})
                
            except Exception as e:
                erreurs += 1
                resultats.append({'ref': row.get('ref', 'N/A'), 'error': str(e)})
        
        # Sauvegarder tous les transports cr√©√©s
        try:
            db.session.commit()
            logger.info(f"‚úÖ Import CSV termin√©: {transports_crees} cr√©√©s, {erreurs} erreurs")
        except Exception as e:
            db.session.rollback()
            logger.error(f"‚ùå Erreur lors de la sauvegarde: {str(e)}")
            return jsonify({'success': False, 'error': f'Erreur lors de la sauvegarde: {str(e)}'}), 500
        
        return jsonify({
            'success': True,
            'message': f'Import termin√©: {transports_crees} cr√©√©s, {erreurs} erreurs',
            'transports_crees': transports_crees,
            'erreurs': erreurs,
            'resultats': resultats
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'import CSV: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

def calculer_emissions_transport(transport):
    """Calcule les √©missions CO‚ÇÇe d'un transport selon son niveau de calcul"""
    try:
        logger.info(f"Calcul des √©missions pour le transport {transport.ref}")
        
        # V√©rifier les donn√©es minimales
        if not transport.poids_tonnes or not transport.distance_km:
            return {
                'success': False,
                'error': 'Poids ou distance manquant',
                'emis_kg': 0,
                'emis_tkm': 0
            }
        
        emis_kg = 0
        emis_tkm = 0
        
        # Niveau 1 : Calcul bas√© sur le v√©hicule et l'√©nergie
        if transport.niveau_calcul and 'niveau_1' in transport.niveau_calcul:
            logger.info(f"Transport {transport.ref}: Calcul niveau 1")
            
            if not transport.type_vehicule:
                return {
                    'success': False,
                    'error': 'Type de v√©hicule manquant pour niveau 1',
                    'emis_kg': 0,
                    'emis_tkm': 0
                }
            
            # R√©cup√©rer le v√©hicule
            vehicule = Vehicule.query.get(transport.type_vehicule)
            if not vehicule:
                return {
                    'success': False,
                    'error': f'V√©hicule {transport.type_vehicule} non trouv√©',
                    'emis_kg': 0,
                    'emis_tkm': 0
                }
            
            if not vehicule.consommation:
                return {
                    'success': False,
                    'error': 'Consommation du v√©hicule manquante',
                    'emis_kg': 0,
                    'emis_tkm': 0
                }
            
            # Calcul avec consommation du v√©hicule
            consommation_totale = (transport.distance_km / 100) * vehicule.consommation
            
            if transport.energie:
                # R√©cup√©rer l'√©nergie
                energie = Energie.query.get(transport.energie)
                if energie and energie.facteur:
                    # Calcul avec facteur d'√©mission de l'√©nergie
                    emis_kg = consommation_totale * energie.facteur
                    logger.info(f"Transport {transport.ref}: Calcul avec facteur √©nergie {energie.facteur}")
                else:
                    # Fallback sur les √©missions du v√©hicule
                    if vehicule.emissions:
                        emis_kg = (consommation_totale * vehicule.emissions) / 1000
                        logger.info(f"Transport {transport.ref}: Fallback sur √©missions v√©hicule")
                    else:
                        return {
                            'success': False,
                            'error': 'Aucun facteur d\'√©mission disponible',
                            'emis_kg': 0,
                            'emis_tkm': 0
                        }
            else:
                # Fallback sur les √©missions du v√©hicule
                if vehicule.emissions:
                    emis_kg = (consommation_totale * vehicule.emissions) / 1000
                    logger.info(f"Transport {transport.ref}: Fallback sur √©missions v√©hicule (pas d'√©nergie)")
                else:
                    return {
                        'success': False,
                        'error': 'Aucun facteur d\'√©mission disponible',
                        'emis_kg': 0,
                        'emis_tkm': 0
                    }
            
            # kg CO‚ÇÇe/t.km impos√© par le v√©hicule
            if vehicule.emissions:
                emis_tkm = vehicule.emissions / 1000
            else:
                emis_tkm = 0
                
        else:
            # Niveaux 2, 3, 4 : Calcul bas√© sur la consommation et l'√©nergie
            logger.info(f"Transport {transport.ref}: Calcul niveaux 2-4")
            
            if not transport.conso_vehicule:
                return {
                    'success': False,
                    'error': 'Consommation v√©hicule manquante pour niveaux 2-4',
                    'emis_kg': 0,
                    'emis_tkm': 0
                }
            
            if not transport.energie:
                return {
                    'success': False,
                    'error': '√ânergie manquante pour niveaux 2-4',
                    'emis_kg': 0,
                    'emis_tkm': 0
                }
            
            # R√©cup√©rer l'√©nergie
            energie = Energie.query.get(transport.energie)
            if not energie or not energie.facteur:
                return {
                    'success': False,
                    'error': 'Facteur d\'√©mission de l\'√©nergie manquant',
                    'emis_kg': 0,
                    'emis_tkm': 0
                }
            
            # Calcul avec consommation et facteur d'√©mission
            consommation_totale = (transport.distance_km / 100) * transport.conso_vehicule
            emis_kg = consommation_totale * energie.facteur
            
            # kg CO‚ÇÇe/t.km calcul√©
            masse_distance = transport.poids_tonnes * transport.distance_km
            if masse_distance > 0:
                emis_tkm = emis_kg / masse_distance
            else:
                emis_tkm = 0
        
        # Arrondir les r√©sultats
        emis_kg = round(emis_kg, 2)
        emis_tkm = round(emis_tkm, 3)
        
        logger.info(f"Transport {transport.ref}: √âmissions calcul√©es - {emis_kg} kg, {emis_tkm} kg/t.km")
        
        return {
            'success': True,
            'emis_kg': emis_kg,
            'emis_tkm': emis_tkm
        }
        
    except Exception as e:
        logger.error(f"Erreur lors du calcul des √©missions pour le transport {transport.ref}: {str(e)}")
        return {
            'success': False,
            'error': f'Erreur de calcul: {str(e)}',
            'emis_kg': 0,
            'emis_tkm': 0
        }

@app.route('/api/transports/recalculer-emissions', methods=['POST'])
def recalculer_emissions():
    """Endpoint pour recalculer les √©missions de tous les transports"""
    try:
        data = request.get_json()
        action = data.get('action', 'recalculer_tous')
        
        logger.info(f"Recalcul des √©missions - Action: {action}")
        
        if action == 'recalculer_tous':
            # R√©cup√©rer tous les transports
            transports = Transport.query.all()
            logger.info(f"Recalcul de {len(transports)} transports")
            
            succes = 0
            erreurs = 0
            resultats = []
            
            for transport in transports:
                try:
                    # Calculer les √©missions
                    resultat = calculer_emissions_transport(transport)
                    
                    if resultat['success']:
                        # Mettre √† jour le transport en base
                        transport.emis_kg = resultat['emis_kg']
                        transport.emis_tkm = resultat['emis_tkm']
                        succes += 1
                        
                        resultats.append({
                            'ref': transport.ref,
                            'emis_kg': resultat['emis_kg'],
                            'emis_tkm': resultat['emis_tkm'],
                            'success': True
                        })
                        
                        logger.info(f"Transport {transport.ref}: √âmissions mises √† jour")
                    else:
                        erreurs += 1
                        logger.warning(f"Transport {transport.ref}: {resultat['error']}")
                        
                        resultats.append({
                            'ref': transport.ref,
                            'error': resultat['error'],
                            'success': False
                        })
                        
                except Exception as e:
                    erreurs += 1
                    logger.error(f"Erreur pour le transport {transport.ref}: {str(e)}")
                    
                    resultats.append({
                        'ref': transport.ref,
                        'error': str(e),
                        'success': False
                    })
            
            # Sauvegarder toutes les modifications
            try:
                db.session.commit()
                logger.info(f"Base de donn√©es mise √† jour: {succes} succ√®s, {erreurs} erreurs")
            except Exception as e:
                db.session.rollback()
                logger.error(f"Erreur lors de la sauvegarde: {str(e)}")
                return jsonify({
                    'success': False,
                    'error': f'Erreur lors de la sauvegarde: {str(e)}'
                }), 500
            
            return jsonify({
                'success': True,
                'message': f'Recalcul termin√©: {succes} succ√®s, {erreurs} erreurs',
                'succes': succes,
                'erreurs': erreurs,
                'resultats': resultats
            })
            
        else:
            return jsonify({
                'success': False,
                'error': f'Action non reconnue: {action}'
            }), 400
            
    except Exception as e:
        logger.error(f"Erreur lors du recalcul des √©missions: {str(e)}")
        return jsonify({
            'success': False,
            'error': f'Erreur serveur: {str(e)}'
        }), 500

@app.route('/api/transports/liste-mise-a-jour')
def liste_transports_mise_a_jour():
    """Endpoint pour r√©cup√©rer la liste des transports avec les √©missions mises √† jour"""
    try:
        logger.info("R√©cup√©ration de la liste des transports mise √† jour")
        
        # R√©cup√©rer tous les transports
        transports = Transport.query.all()
        transports_data = []
        
        for transport in transports:
            transports_data.append({
                'ref': transport.ref,
                'emis_kg': transport.emis_kg or 0,
                'emis_tkm': transport.emis_tkm or 0,
                'type_transport': transport.type_transport,
                'niveau_calcul': transport.niveau_calcul,
                'type_vehicule': transport.type_vehicule,
                'energie': transport.energie,
                'poids_tonnes': transport.poids_tonnes,
                'distance_km': transport.distance_km,
                'created_at': transport.created_at.isoformat() if transport.created_at else None,
                'updated_at': transport.updated_at.isoformat() if transport.updated_at else None
            })
        
        logger.info(f"Liste mise √† jour: {len(transports_data)} transports")
        
        return jsonify({
            'success': True,
            'transports': transports_data,
            'total': len(transports_data)
        })
        
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration de la liste des transports: {str(e)}")
        return jsonify({
            'success': False,
            'error': f'Erreur serveur: {str(e)}'
        }), 500

@app.route('/api/transports', methods=['GET', 'POST', 'PUT', 'DELETE'])
def api_transports():
    """API pour g√©rer les transports"""
    if request.method == 'GET':
        try:
            # Simulation de donn√©es transports pour le moment
            transports_data = [
                {
                    'id': 1,
                    'reference': 'TR-001',
                    'date_transport': '2024-01-15',
                    'client': 'Client Test 1',
                    'transporteur': 'Transporteur Test 1',
                    'vehicule': 'Camion 3.5T',
                    'energie': 'Gazole',
                    'distance': 150,
                    'poids': 2.5,
                    'emissions_co2': 45.5,
                    'statut': 'termin√©'
                },
                {
                    'id': 2,
                    'reference': 'TR-002',
                    'date_transport': '2024-01-16',
                    'client': 'Client Test 2',
                    'transporteur': 'Transporteur Test 2',
                    'vehicule': 'Camion 7.5T',
                    'energie': 'Gazole',
                    'distance': 200,
                    'poids': 5.0,
                    'emissions_co2': 78.2,
                    'statut': 'en_cours'
                }
            ]
            
            return jsonify({
                'success': True,
                'transports': transports_data
            })
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des transports: {str(e)}")
            return jsonify({'success': False, 'error': str(e)}), 500
    
    elif request.method == 'POST':
        try:
            data = request.get_json()
            
            # Simulation de cr√©ation d'un transport
            nouveau_transport = {
                'id': len(data) + 1,  # Simulation d'ID
                'reference': f"TR-{len(data) + 1:03d}",
                'date_transport': data.get('date_transport', ''),
                'client': data.get('client', ''),
                'transporteur': data.get('transporteur', ''),
                'vehicule': data.get('vehicule', ''),
                'energie': data.get('energie', ''),
                'distance': data.get('distance', 0),
                'poids': data.get('poids', 0),
                'emissions_co2': data.get('emissions_co2', 0),
                'statut': 'en_cours'
            }
            
            logger.info(f"‚úÖ Nouveau transport cr√©√©: {nouveau_transport['reference']}")
            
            return jsonify({
                'success': True,
                'message': 'Transport cr√©√© avec succ√®s',
                'transport': nouveau_transport
            })
            
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation du transport: {str(e)}")
            return jsonify({'success': False, 'error': str(e)}), 500
    
    elif request.method == 'PUT':
        try:
            data = request.get_json()
            transport_id = data.get('id')
            
            # Simulation de mise √† jour d'un transport
            transport_modifie = {
                'id': transport_id,
                'reference': data.get('reference', ''),
                'date_transport': data.get('date_transport', ''),
                'client': data.get('client', ''),
                'transporteur': data.get('transporteur', ''),
                'vehicule': data.get('vehicule', ''),
                'energie': data.get('energie', ''),
                'distance': data.get('distance', 0),
                'poids': data.get('poids', 0),
                'emissions_co2': data.get('emissions_co2', 0),
                'statut': data.get('statut', 'en_cours')
            }
            
            logger.info(f"‚úÖ Transport modifi√©: {transport_modifie['reference']}")
            
            return jsonify({
                'success': True,
                'message': 'Transport modifi√© avec succ√®s',
                'transport': transport_modifie
            })
            
        except Exception as e:
            logger.error(f"Erreur lors de la modification du transport: {str(e)}")
            return jsonify({'success': False, 'error': str(e)}), 500
    
    elif request.method == 'DELETE':
        try:
            data = request.get_json()
            transport_id = data.get('id')
            
            logger.info(f"‚úÖ Transport supprim√©: ID {transport_id}")
            
            return jsonify({
                'success': True,
                'message': 'Transport supprim√© avec succ√®s'
            })
            
        except Exception as e:
            logger.error(f"Erreur lors de la suppression du transport: {str(e)}")
            return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/logout')
def logout():
    """D√©connexion"""
    return render_template('login.html')

@app.route('/health')
def health_check():
    """Point de contr√¥le de sant√© pour le d√©ploiement"""
    try:
        # V√©rifier la base de donn√©es
        db.session.execute(text('SELECT 1'))
        db_status = 'OK'
        db_details = 'Connexion r√©ussie'
    except Exception as e:
        db_status = f'ERROR: {str(e)}'
        db_details = f'Type: {type(e).__name__}'
    
    # V√©rifier les mod√®les
    try:
        energie_count = Energie.query.count()
        transport_count = Transport.query.count()
        vehicule_count = Vehicule.query.count()
        models_status = 'OK'
        models_details = {
            'energies': energie_count,
            'transports': transport_count,
            'vehicules': vehicule_count
        }
    except Exception as e:
        models_status = f'ERROR: {str(e)}'
        models_details = f'Type: {type(e).__name__}'
    
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.utcnow().isoformat(),
        'database': {
            'status': db_status,
            'details': db_details
        },
        'models': {
            'status': models_status,
            'details': models_details
        },
        'app_info': {
            'flask_version': '2.3.3',
            'sqlalchemy_version': '2.0.43',
            'environment': app.config.get('ENV', 'production')
        }
    })

@app.route('/debug/database')
def debug_database():
    """Route de diagnostic pour la structure de la base de donn√©es"""
    try:
        # V√©rifier la structure de la table energies
        with db.engine.connect() as conn:
            # Pour PostgreSQL
            if 'postgresql' in str(db.engine.url):
                # R√©cup√©rer la structure de la table energies
                result = conn.execute(text("""
                    SELECT column_name, data_type, is_nullable, column_default
                    FROM information_schema.columns 
                    WHERE table_name = 'energies'
                    ORDER BY ordinal_position
                """))
                
                columns = []
                for row in result:
                    columns.append({
                        'name': row[0],
                        'type': row[1],
                        'nullable': row[2],
                        'default': row[3]
                    })
                
                # V√©rifier les colonnes manquantes
                missing_columns = []
                required_columns = ['phase_amont', 'phase_fonctionnement', 'donnees_supplementaires']
                existing_columns = [col['name'] for col in columns]
                
                for col in required_columns:
                    if col not in existing_columns:
                        missing_columns.append(col)
                
                # V√©rifier les donn√©es existantes
                try:
                    energie_count = Energie.query.count()
                    vehicule_count = Vehicule.query.count()
                    sample_energies = Energie.query.limit(3).all()
                    sample_vehicules = Vehicule.query.limit(3).all()
                    
                    sample_data = {
                        'energies': [],
                        'vehicules': []
                    }
                    
                    for e in sample_energies:
                        sample_data['energies'].append({
                            'id': e.id,
                            'nom': e.nom,
                            'has_phase_amont': hasattr(e, 'phase_amont'),
                            'has_phase_fonctionnement': hasattr(e, 'phase_fonctionnement'),
                            'has_donnees_supplementaires': hasattr(e, 'donnees_supplementaires')
                        })
                    
                    for v in sample_vehicules:
                        sample_data['vehicules'].append({
                            'id': v.id,
                            'nom': v.nom,
                            'type': v.type,
                            'consommation': v.consommation,
                            'emissions': v.emissions,
                            'charge_utile': v.charge_utile
                        })
                        
                except Exception as model_error:
                    sample_data = f"Erreur mod√®les: {str(model_error)}"
                
                return jsonify({
                    'success': True,
                    'database_type': 'PostgreSQL',
                    'table': 'energies',
                    'columns': columns,
                    'missing_columns': missing_columns,
                    'total_columns': len(columns),
                    'data_info': {
                        'total_energies': energie_count if 'energie_count' in locals() else 'N/A',
                        'sample_data': sample_data
                    }
                })
            else:
                return jsonify({
                    'success': True,
                    'database_type': 'SQLite',
                    'message': 'Structure automatiquement g√©r√©e par SQLAlchemy'
                })
                
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du diagnostic de la base: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e),
            'error_type': type(e).__name__
        }), 500

@app.route('/debug')
def debug_page():
    """Page de debug pour diagnostiquer la base de donn√©es"""
    return render_template('debug.html')

@app.route('/debug/invitations')
def debug_invitations():
    """Debug sp√©cifique pour les invitations"""
    try:
        # V√©rifier les mod√®les
        invitations_count = Invitation.query.count()
        clients_count = Client.query.count() if 'Client' in globals() else 0
        transporteurs_count = Transporteur.query.count() if 'Transporteur' in globals() else 0
        
        # V√©rifier les templates
        import os
        template_folder = app.template_folder
        invitations_template = os.path.join(template_folder, 'invitations.html')
        base_template = os.path.join(template_folder, 'base.html')
        
        debug_info = {
            'status': 'OK',
            'models': {
                'invitations_count': invitations_count,
                'clients_count': clients_count,
                'transporteurs_count': transporteurs_count
            },
            'templates': {
                'template_folder': template_folder,
                'invitations_template_exists': os.path.exists(invitations_template),
                'base_template_exists': os.path.exists(base_template),
                'invitations_template_path': invitations_template,
                'base_template_path': base_template
            },
            'routes': {
                '/invitations': 'invitations()',
                '/api/invitations': 'api_invitations()',
                '/invitation/<token>': 'invitation_accept(token)'
            }
        }
        
        return jsonify(debug_info)
        
    except Exception as e:
        logger.error(f"Erreur debug invitations: {str(e)}")
        return jsonify({
            'status': 'ERROR',
            'error': str(e),
            'error_type': type(e).__name__
        }), 500

@app.route('/test-invitations')
def test_invitations_page():
    """Page de test pour diagnostiquer les probl√®mes d'invitations"""
    try:
        return render_template('test_invitations.html')
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage de la page de test invitations: {str(e)}")
        return f"Erreur page de test: {str(e)}", 500

@app.route('/debug/vehicules')
def debug_vehicules_page():
    """Page de debug sp√©cifique pour les v√©hicules"""
    return render_template('debug_vehicules.html')

@app.route('/parametrage_transporteurs')
def parametrage_transporteurs():
    """Page de param√©trage des transporteurs"""
    try:
        return render_template('parametrage_transporteurs.html')
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage des transporteurs: {str(e)}")
        return render_template('error.html', error=str(e)), 500

@app.route('/parametrage_dashboards')
def parametrage_dashboards():
    """Page de param√©trage des dashboards"""
    try:
        return render_template('parametrage_dashboards.html')
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage des dashboards: {str(e)}")
        return render_template('error.html', error=str(e)), 500

@app.route('/clients')
def clients():
    """Page de gestion des clients (c√¥t√© client)"""
    try:
        return render_template('clients.html')
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage des clients: {str(e)}")
        return render_template('error.html', error=str(e)), 500

@app.route('/api/clients', methods=['GET', 'POST', 'PUT', 'DELETE'])
def api_clients():
    """API pour g√©rer les clients"""
    if request.method == 'GET':
        try:
            clients = Client.query.all()
            clients_data = []
            
            for client in clients:
                clients_data.append({
                    'id': client.id,
                    'nom': client.nom,
                    'email': client.email,
                    'telephone': client.telephone,
                    'adresse': client.adresse,
                    'siret': client.siret,
                    'site_web': client.site_web,
                    'description': client.description,
                    'statut': client.statut,
                    'created_at': client.created_at.strftime('%Y-%m-%d %H:%M:%S') if client.created_at else None
                })
            
            return jsonify({
                'success': True,
                'clients': clients_data
            })
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des clients: {str(e)}")
            return jsonify({'success': False, 'error': str(e)}), 500
    
    elif request.method == 'POST':
        try:
            data = request.get_json()
            
            # Validation des donn√©es
            if not data.get('nom') or not data.get('email'):
                return jsonify({'success': False, 'error': 'Nom et email sont obligatoires'}), 400
            
            # V√©rifier si l'email existe d√©j√†
            if Client.query.filter_by(email=data['email']).first():
                return jsonify({'success': False, 'error': 'Un client avec cet email existe d√©j√†'}), 400
            
            # Cr√©er le nouveau client
            nouveau_client = Client(
                nom=data.get('nom'),
                email=data.get('email'),
                telephone=data.get('telephone'),
                adresse=data.get('adresse'),
                siret=data.get('siret'),
                site_web=data.get('site_web'),
                description=data.get('description'),
                statut='actif'
            )
            
            db.session.add(nouveau_client)
            db.session.commit()
            
            logger.info(f"‚úÖ Nouveau client cr√©√©: {nouveau_client.nom} ({nouveau_client.email})")
            
            # Envoyer un email de confirmation
            try:
                email_envoye = envoyer_email_confirmation_client(nouveau_client)
                if email_envoye:
                    logger.info(f"üìß Email de confirmation envoy√© √† {nouveau_client.email}")
                else:
                    logger.warning(f"‚ö†Ô∏è √âchec de l'envoi d'email √† {nouveau_client.email}")
            except Exception as email_error:
                logger.warning(f"‚ö†Ô∏è Erreur lors de l'envoi d'email: {str(email_error)}")
            
            return jsonify({
                'success': True,
                'message': 'Client cr√©√© avec succ√®s. Un email de confirmation a √©t√© envoy√©.',
                'client': {
                    'id': nouveau_client.id,
                    'nom': nouveau_client.nom,
                    'email': nouveau_client.email,
                    'telephone': nouveau_client.telephone,
                    'adresse': nouveau_client.adresse,
                    'statut': nouveau_client.statut
                }
            })
            
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation du client: {str(e)}")
            db.session.rollback()
            return jsonify({'success': False, 'error': str(e)}), 500
    
    elif request.method == 'PUT':
        try:
            data = request.get_json()
            client_id = data.get('id')
            
            if not client_id:
                return jsonify({'success': False, 'error': 'ID du client manquant'}), 400
            
            client = Client.query.get(client_id)
            if not client:
                return jsonify({'success': False, 'error': 'Client non trouv√©'}), 404
            
            # Mettre √† jour les champs
            if data.get('nom'):
                client.nom = data['nom']
            if data.get('email'):
                # V√©rifier si l'email existe d√©j√† pour un autre client
                existing_client = Client.query.filter_by(email=data['email']).first()
                if existing_client and existing_client.id != client_id:
                    return jsonify({'success': False, 'error': 'Un autre client utilise d√©j√† cet email'}), 400
                client.email = data['email']
            if data.get('telephone'):
                client.telephone = data['telephone']
            if data.get('adresse'):
                client.adresse = data['adresse']
            if data.get('siret'):
                client.siret = data['siret']
            if data.get('site_web'):
                client.site_web = data['site_web']
            if data.get('description'):
                client.description = data['description']
            if data.get('statut'):
                client.statut = data['statut']
            
            client.updated_at = datetime.utcnow()
            db.session.commit()
            
            logger.info(f"‚úÖ Client modifi√©: {client.nom}")
            
            return jsonify({
                'success': True,
                'message': 'Client modifi√© avec succ√®s',
                'client': {
                    'id': client.id,
                    'nom': client.nom,
                    'email': client.email,
                    'telephone': client.telephone,
                    'adresse': client.adresse,
                    'statut': client.statut
                }
            })
            
        except Exception as e:
            logger.error(f"Erreur lors de la modification du client: {str(e)}")
            db.session.rollback()
            return jsonify({'success': False, 'error': str(e)}), 500
    
    elif request.method == 'DELETE':
        try:
            data = request.get_json()
            client_id = data.get('id')
            
            if not client_id:
                return jsonify({'success': False, 'error': 'ID du client manquant'}), 400
            
            client = Client.query.get(client_id)
            if not client:
                return jsonify({'success': False, 'error': 'Client non trouv√©'}), 404
            
            nom_client = client.nom
            db.session.delete(client)
            db.session.commit()
            
            logger.info(f"‚úÖ Client supprim√©: {nom_client} (ID: {client_id})")
            
            return jsonify({
                'success': True,
                'message': 'Client supprim√© avec succ√®s'
            })
            
        except Exception as e:
            logger.error(f"Erreur lors de la suppression du client: {str(e)}")
            db.session.rollback()
            return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/clients/<int:client_id>', methods=['DELETE'])
def delete_client_by_id(client_id):
    """Supprimer un client par son ID"""
    try:
        client = Client.query.get(client_id)
        if not client:
            return jsonify({'success': False, 'error': 'Client non trouv√©'}), 404
        
        nom_client = client.nom
        
        # V√©rifier s'il y a des transports associ√©s √† ce client
        # Les transports utilisent un champ 'client' (string) et non 'client_id'
        try:
            from sqlalchemy import text
            transports_count = db.session.execute(
                text("SELECT COUNT(*) FROM transports WHERE client = :client_ref"),
                {'client_ref': f'CL{client_id:03d}'}  # Format CL001, CL002, etc.
            ).scalar()
            
            if transports_count > 0:
                return jsonify({
                    'success': False, 
                    'error': f'Impossible de supprimer ce client car il a {transports_count} transport(s) associ√©(s). Supprimez d\'abord les transports.'
                }), 400
        except Exception as db_error:
            # Si la table transports n'existe pas ou a une structure diff√©rente, on continue
            logger.warning(f"‚ö†Ô∏è Impossible de v√©rifier les transports: {str(db_error)}")
            pass
        
        # Supprimer les invitations associ√©es √† ce client
        invitations = Invitation.query.filter_by(email=client.email).all()
        for invitation in invitations:
            db.session.delete(invitation)
        
        # Supprimer le client
        db.session.delete(client)
        db.session.commit()
        
        logger.info(f"‚úÖ Client supprim√©: {nom_client} (ID: {client_id})")
        
        return jsonify({
            'success': True,
            'message': f'Client "{nom_client}" supprim√© avec succ√®s'
        })
        
    except Exception as e:
        logger.error(f"Erreur lors de la suppression du client {client_id}: {str(e)}")
        db.session.rollback()
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/transporteurs')
def transporteurs():
    """Page de gestion des transporteurs (c√¥t√© client)"""
    try:
        return render_template('transporteurs.html')
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage des transporteurs: {str(e)}")
        return render_template('error.html', error=str(e)), 500

@app.route('/api/transporteurs', methods=['GET', 'POST'])
def api_transporteurs():
    """API pour g√©rer les transporteurs"""
    if request.method == 'GET':
        try:
            transporteurs = Transporteur.query.all()
            transporteurs_data = []
            
            for transporteur in transporteurs:
                transporteurs_data.append({
                    'id': transporteur.id,
                    'nom': transporteur.nom,
                    'email': transporteur.email,
                    'telephone': transporteur.telephone,
                    'adresse': transporteur.adresse,
                    'siret': transporteur.siret,
                    'site_web': transporteur.site_web,
                    'description': transporteur.description,
                    'statut': transporteur.statut,
                    'created_at': transporteur.created_at.strftime('%Y-%m-%d %H:%M:%S') if transporteur.created_at else None
                })
            
            return jsonify({
                'success': True,
                'transporteurs': transporteurs_data
            })
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des transporteurs: {str(e)}")
            return jsonify({'success': False, 'error': str(e)}), 500
    
    elif request.method == 'POST':
        try:
            data = request.get_json()
            
            # Validation des donn√©es
            if not data.get('nom') or not data.get('email'):
                return jsonify({'success': False, 'error': 'Nom et email sont obligatoires'}), 400
            
            # V√©rifier si l'email existe d√©j√†
            if Transporteur.query.filter_by(email=data['email']).first():
                return jsonify({'success': False, 'error': 'Un transporteur avec cet email existe d√©j√†'}), 400
            
            # Cr√©er le nouveau transporteur
            nouveau_transporteur = Transporteur(
                nom=data.get('nom'),
                email=data.get('email'),
                telephone=data.get('telephone'),
                adresse=data.get('adresse'),
                siret=data.get('siret'),
                site_web=data.get('site_web'),
                description=data.get('description'),
                statut='actif'
            )
            
            db.session.add(nouveau_transporteur)
            db.session.commit()
            
            logger.info(f"‚úÖ Nouveau transporteur cr√©√©: {nouveau_transporteur.nom} ({nouveau_transporteur.email})")
            
            # Envoyer un email de confirmation
            try:
                email_envoye = envoyer_email_confirmation_transporteur(nouveau_transporteur)
                if email_envoye:
                    logger.info(f"üìß Email de confirmation envoy√© √† {nouveau_transporteur.email}")
                else:
                    logger.warning(f"‚ö†Ô∏è √âchec de l'envoi d'email √† {nouveau_transporteur.email}")
            except Exception as email_error:
                logger.warning(f"‚ö†Ô∏è Erreur lors de l'envoi d'email: {str(email_error)}")
            
            return jsonify({
                'success': True,
                'message': 'Transporteur cr√©√© avec succ√®s. Un email de confirmation a √©t√© envoy√©.',
                'transporteur': {
                    'id': nouveau_transporteur.id,
                    'nom': nouveau_transporteur.nom,
                    'email': nouveau_transporteur.email,
                    'telephone': nouveau_transporteur.telephone,
                    'adresse': nouveau_transporteur.adresse,
                    'statut': nouveau_transporteur.statut
                }
            })
            
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation du transporteur: {str(e)}")
            db.session.rollback()
            return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/transporteurs/<int:transporteur_id>', methods=['PUT', 'DELETE'])
def api_transporteur_individual(transporteur_id):
    """API pour modifier ou supprimer un transporteur sp√©cifique"""
    if request.method == 'PUT':
        try:
            data = request.get_json()
            
            transporteur = Transporteur.query.get(transporteur_id)
            if not transporteur:
                return jsonify({'success': False, 'error': 'Transporteur non trouv√©'}), 404
            
            # Mettre √† jour les champs
            if data.get('nom'):
                transporteur.nom = data['nom']
            if data.get('email'):
                # V√©rifier si l'email existe d√©j√† pour un autre transporteur
                existing_transporteur = Transporteur.query.filter_by(email=data['email']).first()
                if existing_transporteur and existing_transporteur.id != transporteur_id:
                    return jsonify({'success': False, 'error': 'Un autre transporteur utilise d√©j√† cet email'}), 400
                transporteur.email = data['email']
            if data.get('telephone'):
                transporteur.telephone = data['telephone']
            if data.get('adresse'):
                transporteur.adresse = data['adresse']
            if data.get('siret'):
                transporteur.siret = data['siret']
            if data.get('site_web'):
                transporteur.site_web = data['site_web']
            if data.get('description'):
                transporteur.description = data['description']
            if data.get('statut'):
                transporteur.statut = data['statut']
            
            transporteur.updated_at = datetime.utcnow()
            db.session.commit()
            
            logger.info(f"‚úÖ Transporteur modifi√©: {transporteur.nom}")
            
            return jsonify({
                'success': True,
                'message': 'Transporteur modifi√© avec succ√®s',
                'transporteur': {
                    'id': transporteur.id,
                    'nom': transporteur.nom,
                    'email': transporteur.email,
                    'telephone': transporteur.telephone,
                    'adresse': transporteur.adresse,
                    'statut': transporteur.statut
                }
            })
            
        except Exception as e:
            logger.error(f"Erreur lors de la modification du transporteur: {str(e)}")
            db.session.rollback()
            return jsonify({'success': False, 'error': str(e)}), 500
    
    elif request.method == 'DELETE':
        try:
            transporteur = Transporteur.query.get(transporteur_id)
            if not transporteur:
                return jsonify({'success': False, 'error': 'Transporteur non trouv√©'}), 404
            
            nom_transporteur = transporteur.nom
            db.session.delete(transporteur)
            db.session.commit()
            
            logger.info(f"‚úÖ Transporteur supprim√©: {nom_transporteur} (ID: {transporteur_id})")
            
            return jsonify({
                'success': True,
                'message': 'Transporteur supprim√© avec succ√®s'
            })
            
        except Exception as e:
            logger.error(f"Erreur lors de la suppression du transporteur: {str(e)}")
            db.session.rollback()
            return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/transporteurs/invite', methods=['POST'])
def invite_transporteur():
    """API pour inviter un transporteur par email"""
    try:
        data = request.get_json()
        transporteur_id = data.get('transporteur_id')
        message_personnalise = data.get('message', '')
        
        if not transporteur_id:
            return jsonify({'success': False, 'error': 'ID du transporteur manquant'}), 400
        
        transporteur = Transporteur.query.get(transporteur_id)
        if not transporteur:
            return jsonify({'success': False, 'error': 'Transporteur non trouv√©'}), 404
        
        if not transporteur.email:
            return jsonify({'success': False, 'error': 'Aucun email configur√© pour ce transporteur'}), 400
        
        # Cr√©er le contenu de l'email d'invitation
        sujet = f"Invitation √† rejoindre MyXploit - {transporteur.nom}"
        
        contenu_html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Invitation MyXploit</title>
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
                .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }}
                .content {{ background: #f8fafc; padding: 30px; border-radius: 0 0 10px 10px; }}
                .btn {{ display: inline-block; background: #48bb78; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }}
                .footer {{ text-align: center; margin-top: 30px; color: #666; font-size: 0.9em; }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üöö Invitation MyXploit</h1>
                    <p>Rejoignez notre plateforme de gestion des transports</p>
                </div>
                <div class="content">
                    <h2>Bonjour {transporteur.nom},</h2>
                    <p>Vous avez √©t√© invit√© √† rejoindre la plateforme <strong>MyXploit</strong> pour g√©rer vos transports et optimiser votre empreinte carbone.</p>
                    
                    {f'<p><em>"{message_personnalise}"</em></p>' if message_personnalise else ''}
                    
                    <h3>üéØ Avantages de MyXploit :</h3>
                    <ul>
                        <li>üìä Suivi en temps r√©el de vos √©missions CO‚ÇÇ</li>
                        <li>üìà Tableaux de bord et rapports d√©taill√©s</li>
                        <li>üöõ Gestion compl√®te de votre flotte</li>
                        <li>üå± Optimisation de votre impact environnemental</li>
                        <li>üì± Interface moderne et intuitive</li>
                    </ul>
                    
                    <p>Cliquez sur le bouton ci-dessous pour acc√©der √† votre espace :</p>
                    <a href="https://myxploit-transports.onrender.com/login" class="btn">Acc√©der √† MyXploit</a>
                    
                    <p>Si vous avez des questions, n'h√©sitez pas √† nous contacter.</p>
                    
                    <p>Cordialement,<br>L'√©quipe MyXploit</p>
                </div>
                <div class="footer">
                    <p>Cet email a √©t√© envoy√© automatiquement par MyXploit</p>
                    <p>Si vous ne souhaitez plus recevoir ces emails, vous pouvez nous le signaler.</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        contenu_texte = f"""
        Invitation MyXploit
        
        Bonjour {transporteur.nom},
        
        Vous avez √©t√© invit√© √† rejoindre la plateforme MyXploit pour g√©rer vos transports et optimiser votre empreinte carbone.
        
        {f'Message personnalis√©: "{message_personnalise}"' if message_personnalise else ''}
        
        Avantages de MyXploit :
        - Suivi en temps r√©el de vos √©missions CO‚ÇÇ
        - Tableaux de bord et rapports d√©taill√©s
        - Gestion compl√®te de votre flotte
        - Optimisation de votre impact environnemental
        - Interface moderne et intuitive
        
        Acc√©dez √† votre espace : https://myxploit-transports.onrender.com/login
        
        Si vous avez des questions, n'h√©sitez pas √† nous contacter.
        
        Cordialement,
        L'√©quipe MyXploit
        """
        
        # Envoyer l'email
        email_envoye = envoyer_email(transporteur.email, sujet, contenu_html, contenu_texte)
        
        if email_envoye:
            logger.info(f"üìß Invitation envoy√©e √† {transporteur.nom} ({transporteur.email})")
            return jsonify({
                'success': True,
                'message': f'Invitation envoy√©e avec succ√®s √† {transporteur.email}'
            })
        else:
            logger.warning(f"‚ö†Ô∏è √âchec de l'envoi d'invitation √† {transporteur.email}")
            return jsonify({
                'success': False,
                'error': 'Erreur lors de l\'envoi de l\'email'
            }), 500
            
    except Exception as e:
        logger.error(f"Erreur lors de l'invitation du transporteur: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/transports-v2', methods=['GET', 'POST'])
def api_transports_new():
    """API pour g√©rer les transports"""
    if request.method == 'GET':
        try:
            transports = Transport.query.all()
            transports_data = []
            
            for transport in transports:
                transports_data.append({
                    'id': transport.id,
                    'ref': transport.ref,
                    'date': transport.date.strftime('%Y-%m-%d') if transport.date else None,
                    'lieu_collecte': transport.lieu_collecte,
                    'lieu_livraison': transport.lieu_livraison,
                    'poids_tonnes': transport.poids_tonnes,
                    'type_transport': transport.type_transport,
                    'distance_km': transport.distance_km,
                    'emis_kg': transport.emis_kg,
                    'emis_tkm': transport.emis_tkm,
                    'client': transport.client,
                    'transporteur': transport.transporteur,
                    'description': transport.description,
                    'created_at': transport.created_at.strftime('%Y-%m-%d %H:%M:%S') if transport.created_at else None
                })
            
            return jsonify({
                'success': True,
                'transports': transports_data
            })
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des transports: {str(e)}")
            return jsonify({'success': False, 'error': str(e)}), 500
    
    elif request.method == 'POST':
        try:
            data = request.get_json()
            
            # Validation des donn√©es obligatoires
            if not data.get('ref') or not data.get('date') or not data.get('lieu_collecte') or not data.get('lieu_livraison') or not data.get('poids_tonnes'):
                return jsonify({'success': False, 'error': 'Tous les champs obligatoires doivent √™tre remplis'}), 400
            
            # V√©rifier si la r√©f√©rence existe d√©j√†
            if Transport.query.filter_by(ref=data['ref']).first():
                return jsonify({'success': False, 'error': 'Une r√©f√©rence de transport avec ce nom existe d√©j√†'}), 400
            
            # Calculer la distance si pas fournie
            distance_km = data.get('distance_km', 0)
            if distance_km == 0:
                distance_km = calculer_distance_km(data['lieu_collecte'], data['lieu_livraison'])
            
            # Calculer les √©missions
            emis_kg, emis_tkm = calculer_emissions_carbone(
                distance_km, 
                data['poids_tonnes'], 
                data.get('type_transport', 'direct')
            )
            
            # Cr√©er le nouveau transport
            nouveau_transport = Transport(
                ref=data['ref'],
                date=datetime.strptime(data['date'], '%Y-%m-%d').date(),
                lieu_collecte=data['lieu_collecte'],
                lieu_livraison=data['lieu_livraison'],
                poids_tonnes=data['poids_tonnes'],
                type_transport=data.get('type_transport', 'direct'),
                distance_km=distance_km,
                emis_kg=emis_kg,
                emis_tkm=emis_tkm,
                client=data.get('client'),
                transporteur=data.get('transporteur'),
                description=data.get('description')
            )
            
            db.session.add(nouveau_transport)
            db.session.commit()
            
            logger.info(f"‚úÖ Nouveau transport cr√©√©: {nouveau_transport.ref}")
            
            return jsonify({
                'success': True,
                'message': 'Transport cr√©√© avec succ√®s',
                'transport': {
                    'id': nouveau_transport.id,
                    'ref': nouveau_transport.ref,
                    'date': nouveau_transport.date.strftime('%Y-%m-%d'),
                    'lieu_collecte': nouveau_transport.lieu_collecte,
                    'lieu_livraison': nouveau_transport.lieu_livraison,
                    'poids_tonnes': nouveau_transport.poids_tonnes,
                    'type_transport': nouveau_transport.type_transport,
                    'distance_km': nouveau_transport.distance_km,
                    'emis_kg': nouveau_transport.emis_kg,
                    'emis_tkm': nouveau_transport.emis_tkm
                }
            })
            
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation du transport: {str(e)}")
            db.session.rollback()
            return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/transports-v2/<int:transport_id>', methods=['PUT', 'DELETE'])
def api_transport_individual_new(transport_id):
    """API pour modifier ou supprimer un transport sp√©cifique"""
    if request.method == 'PUT':
        try:
            data = request.get_json()
            
            transport = Transport.query.get(transport_id)
            if not transport:
                return jsonify({'success': False, 'error': 'Transport non trouv√©'}), 404
            
            # Mettre √† jour les champs
            if data.get('ref'):
                # V√©rifier si la r√©f√©rence existe d√©j√† pour un autre transport
                existing_transport = Transport.query.filter_by(ref=data['ref']).first()
                if existing_transport and existing_transport.id != transport_id:
                    return jsonify({'success': False, 'error': 'Une r√©f√©rence de transport avec ce nom existe d√©j√†'}), 400
                transport.ref = data['ref']
            
            if data.get('date'):
                transport.date = datetime.strptime(data['date'], '%Y-%m-%d').date()
            
            if data.get('lieu_collecte'):
                transport.lieu_collecte = data['lieu_collecte']
            
            if data.get('lieu_livraison'):
                transport.lieu_livraison = data['lieu_livraison']
            
            if data.get('poids_tonnes'):
                transport.poids_tonnes = data['poids_tonnes']
            
            if data.get('type_transport'):
                transport.type_transport = data['type_transport']
            
            # Recalculer la distance et les √©missions si les lieux ou le poids ont chang√©
            if (data.get('lieu_collecte') or data.get('lieu_livraison') or 
                data.get('poids_tonnes') or data.get('type_transport')):
                
                distance_km = calculer_distance_km(transport.lieu_collecte, transport.lieu_livraison)
                emis_kg, emis_tkm = calculer_emissions_carbone(
                    distance_km, 
                    transport.poids_tonnes, 
                    transport.type_transport
                )
                
                transport.distance_km = distance_km
                transport.emis_kg = emis_kg
                transport.emis_tkm = emis_tkm
            
            # Mettre √† jour les autres champs
            if data.get('client'):
                transport.client = data['client']
            if data.get('transporteur'):
                transport.transporteur = data['transporteur']
            if data.get('description'):
                transport.description = data['description']
            
            transport.updated_at = datetime.utcnow()
            db.session.commit()
            
            logger.info(f"‚úÖ Transport modifi√©: {transport.ref}")
            
            return jsonify({
                'success': True,
                'message': 'Transport modifi√© avec succ√®s',
                'transport': {
                    'id': transport.id,
                    'ref': transport.ref,
                    'date': transport.date.strftime('%Y-%m-%d'),
                    'lieu_collecte': transport.lieu_collecte,
                    'lieu_livraison': transport.lieu_livraison,
                    'poids_tonnes': transport.poids_tonnes,
                    'type_transport': transport.type_transport,
                    'distance_km': transport.distance_km,
                    'emis_kg': transport.emis_kg,
                    'emis_tkm': transport.emis_tkm
                }
            })
            
        except Exception as e:
            logger.error(f"Erreur lors de la modification du transport: {str(e)}")
            db.session.rollback()
            return jsonify({'success': False, 'error': str(e)}), 500
    
    elif request.method == 'DELETE':
        try:
            transport = Transport.query.get(transport_id)
            if not transport:
                return jsonify({'success': False, 'error': 'Transport non trouv√©'}), 404
            
            ref_transport = transport.ref
            db.session.delete(transport)
            db.session.commit()
            
            logger.info(f"‚úÖ Transport supprim√©: {ref_transport} (ID: {transport_id})")
            
            return jsonify({
                'success': True,
                'message': 'Transport supprim√© avec succ√®s'
            })
            
        except Exception as e:
            logger.error(f"Erreur lors de la suppression du transport: {str(e)}")
            db.session.rollback()
            return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/transports/calculate-distance', methods=['POST'])
def api_calculate_distance():
    """API pour calculer la distance et les √©missions entre deux lieux"""
    try:
        data = request.get_json()
        
        lieu_depart = data.get('lieu_depart')
        lieu_arrivee = data.get('lieu_arrivee')
        poids_tonnes = data.get('poids_tonnes', 0)
        type_transport = data.get('type_transport', 'direct')
        
        if not lieu_depart or not lieu_arrivee:
            return jsonify({'success': False, 'error': 'Les lieux de d√©part et d\'arriv√©e sont obligatoires'}), 400
        
        # Calculer la distance
        distance_km = calculer_distance_km(lieu_depart, lieu_arrivee)
        
        # Calculer les √©missions
        emis_kg, emis_tkm = calculer_emissions_carbone(distance_km, poids_tonnes, type_transport)
        
        return jsonify({
            'success': True,
            'distance_km': distance_km,
            'emis_kg': emis_kg,
            'emis_tkm': emis_tkm
        })
        
    except Exception as e:
        logger.error(f"Erreur lors du calcul de distance: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/lieux/autocomplete', methods=['GET'])
def api_lieux_autocomplete():
    """API pour l'autocompl√©tion des lieux (codes postaux et villes)"""
    try:
        query = request.args.get('q', '').strip()
        limit = int(request.args.get('limit', 10))
        
        if len(query) < 2:
            return jsonify({
                'success': True,
                'suggestions': []
            })
        
        # Base de donn√©es √©tendue des villes fran√ßaises avec codes postaux
        villes_france = [
            # Paris et r√©gion parisienne
            {"nom": "Paris", "code_postal": "75001", "departement": "75", "region": "√éle-de-France"},
            {"nom": "Paris", "code_postal": "75002", "departement": "75", "region": "√éle-de-France"},
            {"nom": "Paris", "code_postal": "75003", "departement": "75", "region": "√éle-de-France"},
            {"nom": "Paris", "code_postal": "75004", "departement": "75", "region": "√éle-de-France"},
            {"nom": "Paris", "code_postal": "75005", "departement": "75", "region": "√éle-de-France"},
            {"nom": "Paris", "code_postal": "75006", "departement": "75", "region": "√éle-de-France"},
            {"nom": "Paris", "code_postal": "75007", "departement": "75", "region": "√éle-de-France"},
            {"nom": "Paris", "code_postal": "75008", "departement": "75", "region": "√éle-de-France"},
            {"nom": "Paris", "code_postal": "75009", "departement": "75", "region": "√éle-de-France"},
            {"nom": "Paris", "code_postal": "75010", "departement": "75", "region": "√éle-de-France"},
            {"nom": "Paris", "code_postal": "75011", "departement": "75", "region": "√éle-de-France"},
            {"nom": "Paris", "code_postal": "75012", "departement": "75", "region": "√éle-de-France"},
            {"nom": "Paris", "code_postal": "75013", "departement": "75", "region": "√éle-de-France"},
            {"nom": "Paris", "code_postal": "75014", "departement": "75", "region": "√éle-de-France"},
            {"nom": "Paris", "code_postal": "75015", "departement": "75", "region": "√éle-de-France"},
            {"nom": "Paris", "code_postal": "75016", "departement": "75", "region": "√éle-de-France"},
            {"nom": "Paris", "code_postal": "75017", "departement": "75", "region": "√éle-de-France"},
            {"nom": "Paris", "code_postal": "75018", "departement": "75", "region": "√éle-de-France"},
            {"nom": "Paris", "code_postal": "75019", "departement": "75", "region": "√éle-de-France"},
            {"nom": "Paris", "code_postal": "75020", "departement": "75", "region": "√éle-de-France"},
            
            # Banlieue parisienne
            {"nom": "Boulogne-Billancourt", "code_postal": "92100", "departement": "92", "region": "√éle-de-France"},
            {"nom": "Montreuil", "code_postal": "93100", "departement": "93", "region": "√éle-de-France"},
            {"nom": "Saint-Denis", "code_postal": "93200", "departement": "93", "region": "√éle-de-France"},
            {"nom": "Argenteuil", "code_postal": "95100", "departement": "95", "region": "√éle-de-France"},
            {"nom": "Montrouge", "code_postal": "92120", "departement": "92", "region": "√éle-de-France"},
            {"nom": "Nanterre", "code_postal": "92000", "departement": "92", "region": "√éle-de-France"},
            {"nom": "Vitry-sur-Seine", "code_postal": "94400", "departement": "94", "region": "√éle-de-France"},
            {"nom": "Cr√©teil", "code_postal": "94000", "departement": "94", "region": "√éle-de-France"},
            {"nom": "Colombes", "code_postal": "92700", "departement": "92", "region": "√éle-de-France"},
            {"nom": "Aubervilliers", "code_postal": "93300", "departement": "93", "region": "√éle-de-France"},
            {"nom": "Asni√®res-sur-Seine", "code_postal": "92600", "departement": "92", "region": "√éle-de-France"},
            {"nom": "Courbevoie", "code_postal": "92400", "departement": "92", "region": "√éle-de-France"},
            {"nom": "Rueil-Malmaison", "code_postal": "92500", "departement": "92", "region": "√éle-de-France"},
            {"nom": "Champigny-sur-Marne", "code_postal": "94500", "departement": "94", "region": "√éle-de-France"},
            {"nom": "Saint-Maur-des-Foss√©s", "code_postal": "94100", "departement": "94", "region": "√éle-de-France"},
            {"nom": "Drancy", "code_postal": "93700", "departement": "93", "region": "√éle-de-France"},
            {"nom": "Issy-les-Moulineaux", "code_postal": "92130", "departement": "92", "region": "√éle-de-France"},
            {"nom": "Noisy-le-Grand", "code_postal": "93160", "departement": "93", "region": "√éle-de-France"},
            {"nom": "Levallois-Perret", "code_postal": "92300", "departement": "92", "region": "√éle-de-France"},
            {"nom": "Antony", "code_postal": "92160", "departement": "92", "region": "√éle-de-France"},
            
            # Lyon et r√©gion lyonnaise
            {"nom": "Lyon", "code_postal": "69001", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Lyon", "code_postal": "69002", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Lyon", "code_postal": "69003", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Lyon", "code_postal": "69004", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Lyon", "code_postal": "69005", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Lyon", "code_postal": "69006", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Lyon", "code_postal": "69007", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Lyon", "code_postal": "69008", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Lyon", "code_postal": "69009", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Villeurbanne", "code_postal": "69100", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "V√©nissieux", "code_postal": "69200", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Saint-Priest", "code_postal": "69800", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Caluire-et-Cuire", "code_postal": "69300", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Vaulx-en-Velin", "code_postal": "69120", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Bron", "code_postal": "69500", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "D√©cines-Charpieu", "code_postal": "69150", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Oullins", "code_postal": "69600", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Pierre-B√©nite", "code_postal": "69310", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Rillieux-la-Pape", "code_postal": "69140", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Meyzieu", "code_postal": "69330", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            
            # Marseille et r√©gion marseillaise
            {"nom": "Marseille", "code_postal": "13001", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Marseille", "code_postal": "13002", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Marseille", "code_postal": "13003", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Marseille", "code_postal": "13004", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Marseille", "code_postal": "13005", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Marseille", "code_postal": "13006", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Marseille", "code_postal": "13007", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Marseille", "code_postal": "13008", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Marseille", "code_postal": "13009", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Marseille", "code_postal": "13010", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Marseille", "code_postal": "13011", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Marseille", "code_postal": "13012", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Marseille", "code_postal": "13013", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Marseille", "code_postal": "13014", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Marseille", "code_postal": "13015", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Marseille", "code_postal": "13016", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Aix-en-Provence", "code_postal": "13100", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Aubagne", "code_postal": "13400", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "La Ciotat", "code_postal": "13600", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Vitrolles", "code_postal": "13127", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Marignane", "code_postal": "13700", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Martigues", "code_postal": "13500", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Istres", "code_postal": "13800", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Salon-de-Provence", "code_postal": "13300", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Arles", "code_postal": "13200", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Tarascon", "code_postal": "13150", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Miramas", "code_postal": "13140", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Port-de-Bouc", "code_postal": "13110", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Fos-sur-Mer", "code_postal": "13270", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            
            # Toulouse et r√©gion toulousaine
            {"nom": "Toulouse", "code_postal": "31000", "departement": "31", "region": "Occitanie"},
            {"nom": "Toulouse", "code_postal": "31100", "departement": "31", "region": "Occitanie"},
            {"nom": "Toulouse", "code_postal": "31200", "departement": "31", "region": "Occitanie"},
            {"nom": "Toulouse", "code_postal": "31300", "departement": "31", "region": "Occitanie"},
            {"nom": "Toulouse", "code_postal": "31400", "departement": "31", "region": "Occitanie"},
            {"nom": "Toulouse", "code_postal": "31500", "departement": "31", "region": "Occitanie"},
            {"nom": "Colomiers", "code_postal": "31770", "departement": "31", "region": "Occitanie"},
            {"nom": "Tournefeuille", "code_postal": "31170", "departement": "31", "region": "Occitanie"},
            {"nom": "Blagnac", "code_postal": "31700", "departement": "31", "region": "Occitanie"},
            {"nom": "Muret", "code_postal": "31600", "departement": "31", "region": "Occitanie"},
            {"nom": "Plaisance-du-Touch", "code_postal": "31830", "departement": "31", "region": "Occitanie"},
            {"nom": "Cugnaux", "code_postal": "31270", "departement": "31", "region": "Occitanie"},
            {"nom": "Balma", "code_postal": "31130", "departement": "31", "region": "Occitanie"},
            {"nom": "L'Union", "code_postal": "31240", "departement": "31", "region": "Occitanie"},
            {"nom": "Ramonville-Saint-Agne", "code_postal": "31520", "departement": "31", "region": "Occitanie"},
            
            # Nice et C√¥te d'Azur
            {"nom": "Nice", "code_postal": "06000", "departement": "06", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Nice", "code_postal": "06100", "departement": "06", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Nice", "code_postal": "06200", "departement": "06", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Nice", "code_postal": "06300", "departement": "06", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Cannes", "code_postal": "06400", "departement": "06", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Antibes", "code_postal": "06600", "departement": "06", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Grasse", "code_postal": "06130", "departement": "06", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Cagnes-sur-Mer", "code_postal": "06800", "departement": "06", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Menton", "code_postal": "06500", "departement": "06", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Monaco", "code_postal": "98000", "departement": "98", "region": "Monaco"},
            
            # Nantes et r√©gion nantaise
            {"nom": "Nantes", "code_postal": "44000", "departement": "44", "region": "Pays de la Loire"},
            {"nom": "Nantes", "code_postal": "44100", "departement": "44", "region": "Pays de la Loire"},
            {"nom": "Nantes", "code_postal": "44200", "departement": "44", "region": "Pays de la Loire"},
            {"nom": "Nantes", "code_postal": "44300", "departement": "44", "region": "Pays de la Loire"},
            {"nom": "Saint-Nazaire", "code_postal": "44600", "departement": "44", "region": "Pays de la Loire"},
            {"nom": "La Roche-sur-Yon", "code_postal": "85000", "departement": "85", "region": "Pays de la Loire"},
            {"nom": "Le Mans", "code_postal": "72000", "departement": "72", "region": "Pays de la Loire"},
            {"nom": "Angers", "code_postal": "49000", "departement": "49", "region": "Pays de la Loire"},
            {"nom": "Cholet", "code_postal": "49300", "departement": "49", "region": "Pays de la Loire"},
            {"nom": "Laval", "code_postal": "53000", "departement": "53", "region": "Pays de la Loire"},
            {"nom": "Rez√©", "code_postal": "44400", "departement": "44", "region": "Pays de la Loire"},
            {"nom": "Orvault", "code_postal": "44700", "departement": "44", "region": "Pays de la Loire"},
            {"nom": "Vertou", "code_postal": "44120", "departement": "44", "region": "Pays de la Loire"},
            {"nom": "Carquefou", "code_postal": "44470", "departement": "44", "region": "Pays de la Loire"},
            {"nom": "Saint-Herblain", "code_postal": "44800", "departement": "44", "region": "Pays de la Loire"},
            
            # Strasbourg et r√©gion strasbourgeoise
            {"nom": "Strasbourg", "code_postal": "67000", "departement": "67", "region": "Grand Est"},
            {"nom": "Strasbourg", "code_postal": "67100", "departement": "67", "region": "Grand Est"},
            {"nom": "Mulhouse", "code_postal": "68100", "departement": "68", "region": "Grand Est"},
            {"nom": "Colmar", "code_postal": "68000", "departement": "68", "region": "Grand Est"},
            {"nom": "Haguenau", "code_postal": "67500", "departement": "67", "region": "Grand Est"},
            {"nom": "Schiltigheim", "code_postal": "67300", "departement": "67", "region": "Grand Est"},
            {"nom": "Illkirch-Graffenstaden", "code_postal": "67400", "departement": "67", "region": "Grand Est"},
            {"nom": "Saint-Louis", "code_postal": "68300", "departement": "68", "region": "Grand Est"},
            {"nom": "Wittenheim", "code_postal": "68270", "departement": "68", "region": "Grand Est"},
            {"nom": "Kingersheim", "code_postal": "68260", "departement": "68", "region": "Grand Est"},
            
            # Montpellier et r√©gion montpelli√©raine
            {"nom": "Montpellier", "code_postal": "34000", "departement": "34", "region": "Occitanie"},
            {"nom": "Montpellier", "code_postal": "34070", "departement": "34", "region": "Occitanie"},
            {"nom": "Montpellier", "code_postal": "34080", "departement": "34", "region": "Occitanie"},
            {"nom": "Montpellier", "code_postal": "34090", "departement": "34", "region": "Occitanie"},
            {"nom": "B√©ziers", "code_postal": "34500", "departement": "34", "region": "Occitanie"},
            {"nom": "N√Æmes", "code_postal": "30000", "departement": "30", "region": "Occitanie"},
            {"nom": "Perpignan", "code_postal": "66000", "departement": "66", "region": "Occitanie"},
            {"nom": "S√®te", "code_postal": "34200", "departement": "34", "region": "Occitanie"},
            {"nom": "Al√®s", "code_postal": "30100", "departement": "30", "region": "Occitanie"},
            {"nom": "Lunel", "code_postal": "34400", "departement": "34", "region": "Occitanie"},
            {"nom": "Agde", "code_postal": "34300", "departement": "34", "region": "Occitanie"},
            {"nom": "Frontignan", "code_postal": "34110", "departement": "34", "region": "Occitanie"},
            {"nom": "Castelnau-le-Lez", "code_postal": "34170", "departement": "34", "region": "Occitanie"},
            {"nom": "Lattes", "code_postal": "34970", "departement": "34", "region": "Occitanie"},
            {"nom": "Mauguio", "code_postal": "34130", "departement": "34", "region": "Occitanie"},
            
            # Bordeaux et r√©gion bordelaise
            {"nom": "Bordeaux", "code_postal": "33000", "departement": "33", "region": "Nouvelle-Aquitaine"},
            {"nom": "Bordeaux", "code_postal": "33100", "departement": "33", "region": "Nouvelle-Aquitaine"},
            {"nom": "Bordeaux", "code_postal": "33200", "departement": "33", "region": "Nouvelle-Aquitaine"},
            {"nom": "Bordeaux", "code_postal": "33300", "departement": "33", "region": "Nouvelle-Aquitaine"},
            {"nom": "Pessac", "code_postal": "33600", "departement": "33", "region": "Nouvelle-Aquitaine"},
            {"nom": "M√©rignac", "code_postal": "33700", "departement": "33", "region": "Nouvelle-Aquitaine"},
            {"nom": "Talence", "code_postal": "33400", "departement": "33", "region": "Nouvelle-Aquitaine"},
            {"nom": "Villenave-d'Ornon", "code_postal": "33140", "departement": "33", "region": "Nouvelle-Aquitaine"},
            {"nom": "B√®gles", "code_postal": "33130", "departement": "33", "region": "Nouvelle-Aquitaine"},
            {"nom": "Gradignan", "code_postal": "33170", "departement": "33", "region": "Nouvelle-Aquitaine"},
            {"nom": "Cenon", "code_postal": "33150", "departement": "33", "region": "Nouvelle-Aquitaine"},
            {"nom": "Lormont", "code_postal": "33310", "departement": "33", "region": "Nouvelle-Aquitaine"},
            {"nom": "Pessac", "code_postal": "33600", "departement": "33", "region": "Nouvelle-Aquitaine"},
            {"nom": "Le Bouscat", "code_postal": "33110", "departement": "33", "region": "Nouvelle-Aquitaine"},
            {"nom": "Eysines", "code_postal": "33320", "departement": "33", "region": "Nouvelle-Aquitaine"},
            
            # Lille et r√©gion lilloise
            {"nom": "Lille", "code_postal": "59000", "departement": "59", "region": "Hauts-de-France"},
            {"nom": "Lille", "code_postal": "59100", "departement": "59", "region": "Hauts-de-France"},
            {"nom": "Lille", "code_postal": "59200", "departement": "59", "region": "Hauts-de-France"},
            {"nom": "Lille", "code_postal": "59300", "departement": "59", "region": "Hauts-de-France"},
            {"nom": "Roubaix", "code_postal": "59100", "departement": "59", "region": "Hauts-de-France"},
            {"nom": "Tourcoing", "code_postal": "59200", "departement": "59", "region": "Hauts-de-France"},
            {"nom": "Villeneuve-d'Ascq", "code_postal": "59650", "departement": "59", "region": "Hauts-de-France"},
            {"nom": "Dunkerque", "code_postal": "59140", "departement": "59", "region": "Hauts-de-France"},
            {"nom": "Valenciennes", "code_postal": "59300", "departement": "59", "region": "Hauts-de-France"},
            {"nom": "Douai", "code_postal": "59500", "departement": "59", "region": "Hauts-de-France"},
            {"nom": "Wattrelos", "code_postal": "59150", "departement": "59", "region": "Hauts-de-France"},
            {"nom": "Marcq-en-Bar≈ìul", "code_postal": "59700", "departement": "59", "region": "Hauts-de-France"},
            {"nom": "Croix", "code_postal": "59170", "departement": "59", "region": "Hauts-de-France"},
            {"nom": "Lambersart", "code_postal": "59130", "departement": "59", "region": "Hauts-de-France"},
            {"nom": "Lomme", "code_postal": "59160", "departement": "59", "region": "Hauts-de-France"},
            
            # Rennes et r√©gion rennaise
            {"nom": "Rennes", "code_postal": "35000", "departement": "35", "region": "Bretagne"},
            {"nom": "Rennes", "code_postal": "35100", "departement": "35", "region": "Bretagne"},
            {"nom": "Rennes", "code_postal": "35200", "departement": "35", "region": "Bretagne"},
            {"nom": "Brest", "code_postal": "29200", "departement": "29", "region": "Bretagne"},
            {"nom": "Quimper", "code_postal": "29000", "departement": "29", "region": "Bretagne"},
            {"nom": "Lorient", "code_postal": "56100", "departement": "56", "region": "Bretagne"},
            {"nom": "Vannes", "code_postal": "56000", "departement": "56", "region": "Bretagne"},
            {"nom": "Saint-Malo", "code_postal": "35400", "departement": "35", "region": "Bretagne"},
            {"nom": "Foug√®res", "code_postal": "35300", "departement": "35", "region": "Bretagne"},
            {"nom": "Vitr√©", "code_postal": "35500", "departement": "35", "region": "Bretagne"},
            {"nom": "Redon", "code_postal": "35600", "departement": "35", "region": "Bretagne"},
            {"nom": "Dinan", "code_postal": "22100", "departement": "22", "region": "Bretagne"},
            {"nom": "Saint-Brieuc", "code_postal": "22000", "departement": "22", "region": "Bretagne"},
            {"nom": "Lannion", "code_postal": "22300", "departement": "22", "region": "Bretagne"},
            {"nom": "Guingamp", "code_postal": "22200", "departement": "22", "region": "Bretagne"},
            
            # Reims et r√©gion r√©moise
            {"nom": "Reims", "code_postal": "51100", "departement": "51", "region": "Grand Est"},
            {"nom": "Reims", "code_postal": "51200", "departement": "51", "region": "Grand Est"},
            {"nom": "Troyes", "code_postal": "10000", "departement": "10", "region": "Grand Est"},
            {"nom": "Ch√¢lons-en-Champagne", "code_postal": "51000", "departement": "51", "region": "Grand Est"},
            {"nom": "Charleville-M√©zi√®res", "code_postal": "08000", "departement": "08", "region": "Grand Est"},
            {"nom": "Sedan", "code_postal": "08200", "departement": "08", "region": "Grand Est"},
            {"nom": "√âpernay", "code_postal": "51200", "departement": "51", "region": "Grand Est"},
            {"nom": "Vitry-le-Fran√ßois", "code_postal": "51300", "departement": "51", "region": "Grand Est"},
            {"nom": "Romilly-sur-Seine", "code_postal": "10100", "departement": "10", "region": "Grand Est"},
            {"nom": "Saint-Dizier", "code_postal": "52100", "departement": "52", "region": "Grand Est"},
            {"nom": "Chaumont", "code_postal": "52000", "departement": "52", "region": "Grand Est"},
            {"nom": "Langres", "code_postal": "52200", "departement": "52", "region": "Grand Est"},
            {"nom": "Bar-sur-Aube", "code_postal": "10200", "departement": "10", "region": "Grand Est"},
            {"nom": "Nogent-sur-Seine", "code_postal": "10400", "departement": "10", "region": "Grand Est"},
            {"nom": "Sainte-Menehould", "code_postal": "51800", "departement": "51", "region": "Grand Est"},
            
            # Le Havre et r√©gion havraise
            {"nom": "Le Havre", "code_postal": "76600", "departement": "76", "region": "Normandie"},
            {"nom": "Le Havre", "code_postal": "76610", "departement": "76", "region": "Normandie"},
            {"nom": "Le Havre", "code_postal": "76620", "departement": "76", "region": "Normandie"},
            {"nom": "Rouen", "code_postal": "76000", "departement": "76", "region": "Normandie"},
            {"nom": "Caen", "code_postal": "14000", "departement": "14", "region": "Normandie"},
            {"nom": "Cherbourg-en-Cotentin", "code_postal": "50100", "departement": "50", "region": "Normandie"},
            {"nom": "√âvreux", "code_postal": "27000", "departement": "27", "region": "Normandie"},
            {"nom": "Dieppe", "code_postal": "76200", "departement": "76", "region": "Normandie"},
            {"nom": "Alen√ßon", "code_postal": "61000", "departement": "61", "region": "Normandie"},
            {"nom": "Lisieux", "code_postal": "14100", "departement": "14", "region": "Normandie"},
            {"nom": "Vire", "code_postal": "14500", "departement": "14", "region": "Normandie"},
            {"nom": "Falaise", "code_postal": "14700", "departement": "14", "region": "Normandie"},
            {"nom": "Argentan", "code_postal": "61200", "departement": "61", "region": "Normandie"},
            {"nom": "Flers", "code_postal": "61100", "departement": "61", "region": "Normandie"},
            {"nom": "Vernon", "code_postal": "27200", "departement": "27", "region": "Normandie"},
            
            # Saint-√âtienne et r√©gion st√©phanoise
            {"nom": "Saint-√âtienne", "code_postal": "42000", "departement": "42", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Saint-√âtienne", "code_postal": "42100", "departement": "42", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Roanne", "code_postal": "42300", "departement": "42", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Montbrison", "code_postal": "42600", "departement": "42", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Firminy", "code_postal": "42700", "departement": "42", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Saint-Chamond", "code_postal": "42400", "departement": "42", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Rive-de-Gier", "code_postal": "42800", "departement": "42", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Le Chambon-Feugerolles", "code_postal": "42500", "departement": "42", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "La Talaudi√®re", "code_postal": "42350", "departement": "42", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Sorbiers", "code_postal": "42290", "departement": "42", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Roche-la-Moli√®re", "code_postal": "42230", "departement": "42", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Unieux", "code_postal": "42240", "departement": "42", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Andr√©zieux-Bouth√©on", "code_postal": "42160", "departement": "42", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Villars", "code_postal": "42390", "departement": "42", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "La Ricamarie", "code_postal": "42150", "departement": "42", "region": "Auvergne-Rh√¥ne-Alpes"},
            
            # Toulon et r√©gion toulonnaise
            {"nom": "Toulon", "code_postal": "83000", "departement": "83", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Toulon", "code_postal": "83100", "departement": "83", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Toulon", "code_postal": "83200", "departement": "83", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "La Seyne-sur-Mer", "code_postal": "83500", "departement": "83", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Hy√®res", "code_postal": "83400", "departement": "83", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Fr√©jus", "code_postal": "83600", "departement": "83", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Draguignan", "code_postal": "83300", "departement": "83", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Brignoles", "code_postal": "83170", "departement": "83", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Six-Fours-les-Plages", "code_postal": "83140", "departement": "83", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Ollioules", "code_postal": "83190", "departement": "83", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Le Pradet", "code_postal": "83220", "departement": "83", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "La Garde", "code_postal": "83130", "departement": "83", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Le Revest-les-Eaux", "code_postal": "83200", "departement": "83", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "La Valette-du-Var", "code_postal": "83160", "departement": "83", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Solli√®s-Pont", "code_postal": "83210", "departement": "83", "region": "Provence-Alpes-C√¥te d'Azur"},
            
            # Grenoble et r√©gion grenobloise
            {"nom": "Grenoble", "code_postal": "38000", "departement": "38", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Grenoble", "code_postal": "38100", "departement": "38", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Saint-Martin-d'H√®res", "code_postal": "38400", "departement": "38", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "√âchirolles", "code_postal": "38130", "departement": "38", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Vienne", "code_postal": "38200", "departement": "38", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Bourgoin-Jallieu", "code_postal": "38300", "departement": "38", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Voiron", "code_postal": "38500", "departement": "38", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Meylan", "code_postal": "38240", "departement": "38", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Fontaine", "code_postal": "38600", "departement": "38", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Seyssinet-Pariset", "code_postal": "38170", "departement": "38", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Sassenage", "code_postal": "38360", "departement": "38", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Crolles", "code_postal": "38920", "departement": "38", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Le Pont-de-Claix", "code_postal": "38800", "departement": "38", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Saint-√âgr√®ve", "code_postal": "38120", "departement": "38", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Gi√®res", "code_postal": "38610", "departement": "38", "region": "Auvergne-Rh√¥ne-Alpes"},
            
            # Dijon et r√©gion dijonnaise
            {"nom": "Dijon", "code_postal": "21000", "departement": "21", "region": "Bourgogne-Franche-Comt√©"},
            {"nom": "Dijon", "code_postal": "21100", "departement": "21", "region": "Bourgogne-Franche-Comt√©"},
            {"nom": "Chalon-sur-Sa√¥ne", "code_postal": "71100", "departement": "71", "region": "Bourgogne-Franche-Comt√©"},
            {"nom": "Nevers", "code_postal": "58000", "departement": "58", "region": "Bourgogne-Franche-Comt√©"},
            {"nom": "Auxerre", "code_postal": "89000", "departement": "89", "region": "Bourgogne-Franche-Comt√©"},
            {"nom": "M√¢con", "code_postal": "71000", "departement": "71", "region": "Bourgogne-Franche-Comt√©"},
            {"nom": "Sens", "code_postal": "89100", "departement": "89", "region": "Bourgogne-Franche-Comt√©"},
            {"nom": "Le Creusot", "code_postal": "71200", "departement": "71", "region": "Bourgogne-Franche-Comt√©"},
            {"nom": "Montceau-les-Mines", "code_postal": "71300", "departement": "71", "region": "Bourgogne-Franche-Comt√©"},
            {"nom": "Joigny", "code_postal": "89300", "departement": "89", "region": "Bourgogne-Franche-Comt√©"},
            {"nom": "Paray-le-Monial", "code_postal": "71600", "departement": "71", "region": "Bourgogne-Franche-Comt√©"},
            {"nom": "Cosne-Cours-sur-Loire", "code_postal": "58200", "departement": "58", "region": "Bourgogne-Franche-Comt√©"},
            {"nom": "Decize", "code_postal": "58300", "departement": "58", "region": "Bourgogne-Franche-Comt√©"},
            {"nom": "Ch√¢teau-Chinon", "code_postal": "58120", "departement": "58", "region": "Bourgogne-Franche-Comt√©"},
            {"nom": "Clamecy", "code_postal": "58500", "departement": "58", "region": "Bourgogne-Franche-Comt√©"},
            
            # Angers et r√©gion angevine
            {"nom": "Angers", "code_postal": "49000", "departement": "49", "region": "Pays de la Loire"},
            {"nom": "Angers", "code_postal": "49100", "departement": "49", "region": "Pays de la Loire"},
            {"nom": "Cholet", "code_postal": "49300", "departement": "49", "region": "Pays de la Loire"},
            {"nom": "Saumur", "code_postal": "49400", "departement": "49", "region": "Pays de la Loire"},
            {"nom": "S√®vremoine", "code_postal": "49230", "departement": "49", "region": "Pays de la Loire"},
            {"nom": "Tr√©laz√©", "code_postal": "49800", "departement": "49", "region": "Pays de la Loire"},
            {"nom": "Avrill√©", "code_postal": "49240", "departement": "49", "region": "Pays de la Loire"},
            {"nom": "Beaucouz√©", "code_postal": "49070", "departement": "49", "region": "Pays de la Loire"},
            {"nom": "Maz√©-Milon", "code_postal": "49630", "departement": "49", "region": "Pays de la Loire"},
            {"nom": "Longu√©-Jumelles", "code_postal": "49160", "departement": "49", "region": "Pays de la Loire"},
            {"nom": "Dou√©-la-Fontaine", "code_postal": "49700", "departement": "49", "region": "Pays de la Loire"},
            {"nom": "Chemill√©-en-Anjou", "code_postal": "49120", "departement": "49", "region": "Pays de la Loire"},
            {"nom": "Segr√©-en-Anjou Bleu", "code_postal": "49500", "departement": "49", "region": "Pays de la Loire"},
            {"nom": "Baug√©-en-Anjou", "code_postal": "49150", "departement": "49", "region": "Pays de la Loire"},
            {"nom": "Chalonnes-sur-Loire", "code_postal": "49290", "departement": "49", "region": "Pays de la Loire"},
            
            # N√Æmes et r√©gion n√Æmoise
            {"nom": "N√Æmes", "code_postal": "30000", "departement": "30", "region": "Occitanie"},
            {"nom": "N√Æmes", "code_postal": "30900", "departement": "30", "region": "Occitanie"},
            {"nom": "Al√®s", "code_postal": "30100", "departement": "30", "region": "Occitanie"},
            {"nom": "Bagnols-sur-C√®ze", "code_postal": "30200", "departement": "30", "region": "Occitanie"},
            {"nom": "Beaucaire", "code_postal": "30300", "departement": "30", "region": "Occitanie"},
            {"nom": "Uz√®s", "code_postal": "30700", "departement": "30", "region": "Occitanie"},
            {"nom": "Villeneuve-l√®s-Avignon", "code_postal": "30400", "departement": "30", "region": "Occitanie"},
            {"nom": "Pont-Saint-Esprit", "code_postal": "30130", "departement": "30", "region": "Occitanie"},
            {"nom": "Saint-Gilles", "code_postal": "30800", "departement": "30", "region": "Occitanie"},
            {"nom": "Vauvert", "code_postal": "30600", "departement": "30", "region": "Occitanie"},
            {"nom": "Marguerittes", "code_postal": "30320", "departement": "30", "region": "Occitanie"},
            {"nom": "Laudun-l'Ardoise", "code_postal": "30290", "departement": "30", "region": "Occitanie"},
            {"nom": "Rochefort-du-Gard", "code_postal": "30650", "departement": "30", "region": "Occitanie"},
            {"nom": "Saint-Laurent-des-Arbres", "code_postal": "30126", "departement": "30", "region": "Occitanie"},
            {"nom": "Fourques", "code_postal": "30300", "departement": "30", "region": "Occitanie"},
            
            # Villeurbanne et r√©gion villeurbannaise
            {"nom": "Villeurbanne", "code_postal": "69100", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Villeurbanne", "code_postal": "69120", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "V√©nissieux", "code_postal": "69200", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Saint-Priest", "code_postal": "69800", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Caluire-et-Cuire", "code_postal": "69300", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Vaulx-en-Velin", "code_postal": "69120", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Bron", "code_postal": "69500", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "D√©cines-Charpieu", "code_postal": "69150", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Oullins", "code_postal": "69600", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Pierre-B√©nite", "code_postal": "69310", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Rillieux-la-Pape", "code_postal": "69140", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Meyzieu", "code_postal": "69330", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Tassin-la-Demi-Lune", "code_postal": "69160", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "√âcully", "code_postal": "69130", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Champagne-au-Mont-d'Or", "code_postal": "69410", "departement": "69", "region": "Auvergne-Rh√¥ne-Alpes"},
            
            # Saint-Denis et r√©gion saint-dionysienne
            {"nom": "Saint-Denis", "code_postal": "93200", "departement": "93", "region": "√éle-de-France"},
            {"nom": "Saint-Denis", "code_postal": "93210", "departement": "93", "region": "√éle-de-France"},
            {"nom": "Aubervilliers", "code_postal": "93300", "departement": "93", "region": "√éle-de-France"},
            {"nom": "Aulnay-sous-Bois", "code_postal": "93600", "departement": "93", "region": "√éle-de-France"},
            {"nom": "Bondy", "code_postal": "93140", "departement": "93", "region": "√éle-de-France"},
            {"nom": "Drancy", "code_postal": "93700", "departement": "93", "region": "√éle-de-France"},
            {"nom": "√âpinay-sur-Seine", "code_postal": "93800", "departement": "93", "region": "√éle-de-France"},
            {"nom": "La Courneuve", "code_postal": "93120", "departement": "93", "region": "√éle-de-France"},
            {"nom": "Le Blanc-Mesnil", "code_postal": "93150", "departement": "93", "region": "√éle-de-France"},
            {"nom": "Le Bourget", "code_postal": "93350", "departement": "93", "region": "√éle-de-France"},
            {"nom": "Le Raincy", "code_postal": "93340", "departement": "93", "region": "√éle-de-France"},
            {"nom": "Les Lilas", "code_postal": "93260", "departement": "93", "region": "√éle-de-France"},
            {"nom": "Livry-Gargan", "code_postal": "93190", "departement": "93", "region": "√éle-de-France"},
            {"nom": "Montreuil", "code_postal": "93100", "departement": "93", "region": "√éle-de-France"},
            {"nom": "Neuilly-sur-Marne", "code_postal": "93330", "departement": "93", "region": "√éle-de-France"},
            
            {"nom": "Le Mans", "code_postal": "72000", "departement": "72", "region": "Pays de la Loire"},
            {"nom": "Le Mans", "code_postal": "72100", "departement": "72", "region": "Pays de la Loire"},
            
            {"nom": "Aix-en-Provence", "code_postal": "13100", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            {"nom": "Aix-en-Provence", "code_postal": "13290", "departement": "13", "region": "Provence-Alpes-C√¥te d'Azur"},
            
            {"nom": "Clermont-Ferrand", "code_postal": "63000", "departement": "63", "region": "Auvergne-Rh√¥ne-Alpes"},
            {"nom": "Clermont-Ferrand", "code_postal": "63100", "departement": "63", "region": "Auvergne-Rh√¥ne-Alpes"},
            
            {"nom": "Brest", "code_postal": "29200", "departement": "29", "region": "Bretagne"},
            {"nom": "Brest", "code_postal": "29210", "departement": "29", "region": "Bretagne"},
            
            {"nom": "Tours", "code_postal": "37000", "departement": "37", "region": "Centre-Val de Loire"},
            {"nom": "Tours", "code_postal": "37100", "departement": "37", "region": "Centre-Val de Loire"},
            
            {"nom": "Limoges", "code_postal": "87000", "departement": "87", "region": "Nouvelle-Aquitaine"},
            {"nom": "Limoges", "code_postal": "87100", "departement": "87", "region": "Nouvelle-Aquitaine"},
            
            {"nom": "Amiens", "code_postal": "80000", "departement": "80", "region": "Hauts-de-France"},
            {"nom": "Amiens", "code_postal": "80080", "departement": "80", "region": "Hauts-de-France"},
            
            {"nom": "Perpignan", "code_postal": "66000", "departement": "66", "region": "Occitanie"},
            {"nom": "Perpignan", "code_postal": "66100", "departement": "66", "region": "Occitanie"},
            
            {"nom": "Metz", "code_postal": "57000", "departement": "57", "region": "Grand Est"},
            {"nom": "Metz", "code_postal": "57050", "departement": "57", "region": "Grand Est"},
            
            {"nom": "Besan√ßon", "code_postal": "25000", "departement": "25", "region": "Bourgogne-Franche-Comt√©"},
            {"nom": "Besan√ßon", "code_postal": "25010", "departement": "25", "region": "Bourgogne-Franche-Comt√©"},
            
            {"nom": "Orl√©ans", "code_postal": "45000", "departement": "45", "region": "Centre-Val de Loire"},
            {"nom": "Orl√©ans", "code_postal": "45100", "departement": "45", "region": "Centre-Val de Loire"},
            
            {"nom": "Mulhouse", "code_postal": "68100", "departement": "68", "region": "Grand Est"},
            {"nom": "Mulhouse", "code_postal": "68200", "departement": "68", "region": "Grand Est"},
            
            {"nom": "Rouen", "code_postal": "76000", "departement": "76", "region": "Normandie"},
            {"nom": "Rouen", "code_postal": "76100", "departement": "76", "region": "Normandie"},
            
            {"nom": "Caen", "code_postal": "14000", "departement": "14", "region": "Normandie"},
            {"nom": "Caen", "code_postal": "14100", "departement": "14", "region": "Normandie"},
            
            {"nom": "Nancy", "code_postal": "54000", "departement": "54", "region": "Grand Est"},
            {"nom": "Nancy", "code_postal": "54100", "departement": "54", "region": "Grand Est"},
            
            {"nom": "Saint-Denis (La R√©union)", "code_postal": "97400", "departement": "974", "region": "La R√©union"},
            {"nom": "Saint-Pierre (La R√©union)", "code_postal": "97410", "departement": "974", "region": "La R√©union"},
            
            {"nom": "Fort-de-France", "code_postal": "97200", "departement": "972", "region": "Martinique"},
            {"nom": "Pointe-√†-Pitre", "code_postal": "97100", "departement": "971", "region": "Guadeloupe"},
        ]
        
        # Filtrer les suggestions
        suggestions = []
        query_lower = query.lower()
        
        for ville in villes_france:
            # Recherche par nom de ville
            if query_lower in ville["nom"].lower():
                suggestions.append({
                    "value": f"{ville['nom']} ({ville['code_postal']})",
                    "label": f"{ville['nom']} - {ville['code_postal']}",
                    "nom": ville["nom"],
                    "code_postal": ville["code_postal"],
                    "departement": ville["departement"],
                    "region": ville["region"],
                    "type": "ville"
                })
            # Recherche par code postal
            elif query in ville["code_postal"]:
                suggestions.append({
                    "value": f"{ville['nom']} ({ville['code_postal']})",
                    "label": f"{ville['code_postal']} - {ville['nom']}",
                    "nom": ville["nom"],
                    "code_postal": ville["code_postal"],
                    "departement": ville["departement"],
                    "region": ville["region"],
                    "type": "code_postal"
                })
        
        # Limiter le nombre de r√©sultats
        suggestions = suggestions[:limit]
        
        return jsonify({
            'success': True,
            'suggestions': suggestions
        })
        
    except Exception as e:
        logger.error(f"Erreur lors de l'autocompl√©tion des lieux: {str(e)}")
        return jsonify({
            'success': False,
            'error': f'Erreur lors de l\'autocompl√©tion: {str(e)}'
        })

@app.route('/api/vehicules/types', methods=['GET'])
def api_vehicules_types():
    """API pour r√©cup√©rer les types de v√©hicules configur√©s dans l'administration"""
    try:
        # R√©cup√©rer les v√©hicules configur√©s depuis l'administration
        # Utiliser une requ√™te SQL directe pour √©viter les probl√®mes de colonnes manquantes
        result = db.session.execute(text("SELECT id, nom, type, consommation, emissions, charge_utile FROM vehicules"))
        vehicules_data = result.fetchall()
        
        types_vehicules = []
        
        for row in vehicules_data:
            # row est un tuple: (id, nom, type, consommation, emissions, charge_utile)
            vehicule_id, nom, type_vehicule, consommation, emissions, charge_utile = row
            
            types_vehicules.append({
                'value': type_vehicule or nom,  # Utiliser le type ou le nom comme valeur
                'label': nom,  # Le nom du v√©hicule comme label
                'nom': nom,
                'id': vehicule_id,
                'consommation': consommation,
                'emissions': emissions,
                'charge_utile': charge_utile
            })
        
        # Si aucun v√©hicule n'est configur√©, retourner un message d'information
        if not types_vehicules:
            return jsonify({
                'success': True,
                'types_vehicules': [],
                'message': 'Aucun type de v√©hicule configur√©. Veuillez d\'abord configurer des v√©hicules dans Administration > Types de V√©hicules.'
            })
        
        return jsonify({
            'success': True,
            'types_vehicules': types_vehicules
        })
        
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des types de v√©hicules: {str(e)}")
        # En cas d'erreur, retourner une liste vide avec un message
        return jsonify({
            'success': True,
            'types_vehicules': [],
            'message': 'Aucun type de v√©hicule configur√©. Veuillez d\'abord configurer des v√©hicules dans Administration > Types de V√©hicules.'
        })

@app.route('/parametrage_impact')
def parametrage_impact():
    """Page de configuration de l'impact environnemental"""
    try:
        return render_template('parametrage_impact.html')
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage de la configuration d'impact: {str(e)}")
        return render_template('error.html', error=str(e)), 500

@app.route('/parametrage_systeme')
def parametrage_systeme():
    """Page de param√®tres syst√®me"""
    try:
        return render_template('parametrage_systeme.html')
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage des param√®tres syst√®me: {str(e)}")
        return render_template('error.html', error=str(e)), 500

@app.route('/debug/migrate')
def force_migration():
    """Route pour forcer la migration des colonnes manquantes"""
    try:
        with db.engine.connect() as conn:
            if 'postgresql' in str(db.engine.url):
                # Forcer l'ajout des colonnes manquantes
                columns_to_add = [
                    ('phase_amont', 'FLOAT DEFAULT 0.0'),
                    ('phase_fonctionnement', 'FLOAT DEFAULT 0.0'),
                    ('donnees_supplementaires', 'JSONB DEFAULT \'{}\'')
                ]
                
                added_columns = []
                existing_columns = []
                errors = []
                
                for column_name, column_definition in columns_to_add:
                    try:
                        # V√©rifier si la colonne existe
                        result = conn.execute(text(f"""
                            SELECT column_name 
                            FROM information_schema.columns 
                            WHERE table_name = 'energies' 
                            AND column_name = '{column_name}'
                        """))
                        
                        if not result.fetchone():
                            # Ajouter la colonne
                            conn.execute(text(f"ALTER TABLE energies ADD COLUMN {column_name} {column_definition}"))
                            added_columns.append(column_name)
                        else:
                            existing_columns.append(column_name)
                            
                    except Exception as col_error:
                        if "already exists" in str(col_error).lower() or "duplicate column" in str(col_error).lower():
                            existing_columns.append(column_name)
                        else:
                            errors.append(f"{column_name}: {str(col_error)}")
                
                # Valider les changements
                conn.commit()
                
                return jsonify({
                    'success': True,
                    'message': 'Migration termin√©e',
                    'added_columns': added_columns,
                    'existing_columns': existing_columns,
                    'errors': errors
                })
            else:
                return jsonify({
                    'success': True,
                    'message': 'SQLite d√©tect√© - migration non n√©cessaire'
                })
                
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la migration forc√©e: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e),
            'error_type': type(e).__name__
        }), 500

# Routes pour les invitations de clients
@app.route('/invitations')
def invitations():
    """Page de gestion des invitations de clients"""
    try:
        logger.info("üîç Tentative d'acc√®s √† la page invitations")
        
        # V√©rifier si le template existe
        import os
        template_path = os.path.join(app.template_folder, 'invitations.html')
        if not os.path.exists(template_path):
            logger.error(f"‚ùå Template non trouv√©: {template_path}")
            return f"Template non trouv√©: {template_path}", 404
        
        logger.info("‚úÖ Template trouv√©, rendu de la page")
        return render_template('invitations.html')
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'affichage des invitations: {str(e)}")
        return render_template('error.html', error=str(e)), 500

@app.route('/api/invitations', methods=['GET', 'POST'])
def api_invitations():
    """API pour g√©rer les invitations"""
    if request.method == 'GET':
        try:
            invitations = Invitation.query.order_by(Invitation.created_at.desc()).all()
            invitations_data = []
            
            for inv in invitations:
                invitations_data.append({
                    'id': inv.id,
                    'email': inv.email,
                    'statut': inv.statut,
                    'nom_entreprise': inv.nom_entreprise,
                    'nom_utilisateur': inv.nom_utilisateur,
                    'date_invitation': inv.date_invitation.strftime('%d/%m/%Y %H:%M') if inv.date_invitation else None,
                    'date_reponse': inv.date_reponse.strftime('%d/%m/%Y %H:%M') if inv.date_reponse else None,
                    'message_personnalise': inv.message_personnalise
                })
            
            return jsonify({
                'success': True,
                'invitations': invitations_data
            })
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des invitations: {str(e)}")
            return jsonify({'success': False, 'error': str(e)}), 500
    
    elif request.method == 'POST':
        try:
            data = request.get_json()
            email = data.get('email')
            message_personnalise = data.get('message_personnalise', '')
            
            if not email:
                return jsonify({'success': False, 'error': 'Email requis'}), 400
            
            # V√©rifier si l'email n'est pas d√©j√† invit√©
            existing_invitation = Invitation.query.filter_by(email=email).first()
            if existing_invitation:
                return jsonify({'success': False, 'error': 'Une invitation existe d√©j√† pour cet email'}), 400
            
            # G√©n√©rer un token unique
            import secrets
            token = secrets.token_urlsafe(32)
            
            # Cr√©er l'invitation
            invitation = Invitation(
                email=email,
                token=token,
                message_personnalise=message_personnalise
            )
            
            db.session.add(invitation)
            db.session.commit()
            
            # Envoyer l'email d'invitation
            try:
                email_envoye = envoyer_email_invitation(invitation)
                if email_envoye:
                    logger.info(f"üìß Email d'invitation envoy√© avec succ√®s √† {email}")
                else:
                    logger.warning(f"‚ö†Ô∏è √âchec de l'envoi de l'email d'invitation √† {email}")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de l'envoi de l'email d'invitation √† {email}: {str(e)}")
            
            return jsonify({
                'success': True,
                'message': f'Invitation envoy√©e √† {email}',
                'invitation_id': invitation.id
            })
            
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation de l'invitation: {str(e)}")
            return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/invitations/<int:invitation_id>/resend', methods=['POST'])
def resend_invitation(invitation_id):
    """Relancer une invitation existante"""
    try:
        invitation = Invitation.query.get(invitation_id)
        
        if not invitation:
            return jsonify({'success': False, 'error': 'Invitation non trouv√©e'}), 404
        
        if invitation.statut == 'acceptee':
            return jsonify({'success': False, 'error': 'Cette invitation a d√©j√† √©t√© accept√©e'}), 400
        
        # Mettre √† jour la date d'invitation
        invitation.date_invitation = datetime.utcnow()
        db.session.commit()
        
        # Renvoyer l'email d'invitation
        try:
            email_envoye = envoyer_email_invitation(invitation)
            if email_envoye:
                logger.info(f"üìß Email d'invitation relanc√© avec succ√®s √† {invitation.email}")
                return jsonify({
                    'success': True,
                    'message': f'Invitation relanc√©e √† {invitation.email}'
                })
            else:
                logger.warning(f"‚ö†Ô∏è √âchec de l'envoi de l'email d'invitation relanc√© √† {invitation.email}")
                return jsonify({
                    'success': False,
                    'error': '√âchec de l\'envoi de l\'email'
                }), 500
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'envoi de l'email d'invitation relanc√© √† {invitation.email}: {str(e)}")
            return jsonify({
                'success': False,
                'error': f'Erreur lors de l\'envoi: {str(e)}'
            }), 500
            
    except Exception as e:
        logger.error(f"Erreur lors de la relance de l'invitation {invitation_id}: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/clients/<client_id>/invitation-status')
def get_client_invitation_status(client_id):
    """R√©cup√©rer le statut d'invitation d'un client"""
    try:
        # R√©cup√©rer le client
        client = Client.query.get(client_id)
        if not client:
            return jsonify({'success': False, 'error': 'Client non trouv√©'}), 404
        
        # Chercher une invitation pour cet email
        invitation = Invitation.query.filter_by(email=client.email).first()
        
        if invitation:
            return jsonify({
                'success': True,
                'has_invitation': True,
                'invitation': {
                    'id': invitation.id,
                    'statut': invitation.statut,
                    'date_invitation': invitation.date_invitation.strftime('%d/%m/%Y %H:%M') if invitation.date_invitation else None,
                    'date_reponse': invitation.date_reponse.strftime('%d/%m/%Y %H:%M') if invitation.date_reponse else None
                }
            })
        else:
            return jsonify({
                'success': True,
                'has_invitation': False
            })
            
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration du statut d'invitation pour le client {client_id}: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/invitation/<token>')
def invitation_accept(token):
    """Page pour accepter/refuser une invitation"""
    try:
        invitation = Invitation.query.filter_by(token=token).first()
        
        if not invitation:
            return render_template('error.html', error='Invitation invalide ou expir√©e'), 404
        
        if invitation.statut != 'en_attente':
            return render_template('error.html', error='Cette invitation a d√©j√† √©t√© trait√©e'), 400
        
        return render_template('invitation_accept.html', invitation=invitation)
        
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage de l'invitation: {str(e)}")
        return render_template('error.html', error=str(e)), 500

@app.route('/api/invitation/<token>/reponse', methods=['POST'])
def api_invitation_reponse(token):
    """API pour accepter/refuser une invitation"""
    try:
        invitation = Invitation.query.filter_by(token=token).first()
        
        if not invitation:
            return jsonify({'success': False, 'error': 'Invitation invalide'}), 404
        
        if invitation.statut != 'en_attente':
            return jsonify({'success': False, 'error': 'Cette invitation a d√©j√† √©t√© trait√©e'}), 400
        
        data = request.get_json()
        action = data.get('action')  # 'accepter' ou 'refuser'
        nom_entreprise = data.get('nom_entreprise', '')
        nom_utilisateur = data.get('nom_utilisateur', '')
        
        if action == 'accepter':
            if not nom_entreprise or not nom_utilisateur:
                return jsonify({'success': False, 'error': 'Nom d\'entreprise et nom d\'utilisateur requis'}), 400
            
            mot_de_passe = data.get('mot_de_passe')
            if not mot_de_passe:
                return jsonify({'success': False, 'error': 'Mot de passe requis'}), 400
            
            if len(mot_de_passe) < 6:
                return jsonify({'success': False, 'error': 'Le mot de passe doit contenir au moins 6 caract√®res'}), 400
            
            # V√©rifier si l'utilisateur existe d√©j√†
            existing_user = User.query.filter_by(email=invitation.email).first()
            if existing_user:
                return jsonify({'success': False, 'error': 'Un compte existe d√©j√† avec cet email'}), 400
            
            # Cr√©er le compte utilisateur
            nouveau_user = User(
                email=invitation.email,
                mot_de_passe=mot_de_passe,
                nom=nom_utilisateur,
                nom_entreprise=nom_entreprise,
                type_utilisateur='client',
                statut='actif'
            )
            
            db.session.add(nouveau_user)
            
            # Mettre √† jour l'invitation
            invitation.statut = 'acceptee'
            invitation.nom_entreprise = nom_entreprise
            invitation.nom_utilisateur = nom_utilisateur
            invitation.date_reponse = datetime.utcnow()
            
            logger.info(f"‚úÖ Invitation accept√©e par {nom_utilisateur} ({nom_entreprise}) - Compte cr√©√©")
            
        elif action == 'refuser':
            invitation.statut = 'refusee'
            invitation.date_reponse = datetime.utcnow()
            logger.info(f"‚ùå Invitation refus√©e par {invitation.email}")
        
        db.session.commit()
        
        if action == 'accepter':
            return jsonify({
                'success': True,
                'message': f'Invitation accept√©e avec succ√®s. Votre compte a √©t√© cr√©√©.',
                'identifiants': {
                    'email': invitation.email,
                    'mot_de_passe': mot_de_passe
                }
            })
        else:
            return jsonify({
                'success': True,
                'message': f'Invitation {action} avec succ√®s'
            })
        
    except Exception as e:
        logger.error(f"Erreur lors du traitement de l'invitation: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/mon-entreprise')
def mon_entreprise():
    """Page de gestion de l'entreprise (c√¥t√© client)"""
    try:
        return render_template('mon_entreprise.html')
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage de mon entreprise: {str(e)}")
        return render_template('error.html', error=str(e)), 500

# === FONCTIONS UTILITAIRES ===

def getTimeElapsed(date):
    """Calculer le temps √©coul√© depuis une date"""
    if not date:
        return "N/A"
    
    now = datetime.utcnow()
    if isinstance(date, str):
        date = datetime.fromisoformat(date.replace('Z', '+00:00'))
    
    diff = now - date
    
    if diff.days > 0:
        if diff.days == 1:
            return "1 jour"
        else:
            return f"{diff.days} jours"
    elif diff.seconds > 3600:
        hours = diff.seconds // 3600
        if hours == 1:
            return "1 heure"
        else:
            return f"{hours} heures"
    elif diff.seconds > 60:
        minutes = diff.seconds // 60
        if minutes == 1:
            return "1 minute"
        else:
            return f"{minutes} minutes"
    else:
        return "√Ä l'instant"

# === ROUTES D'ADMINISTRATION DES CLIENTS ===

@app.route('/admin/clients')
def admin_clients_list():
    """Page d'administration - Liste des clients"""
    try:
        # R√©cup√©rer tous les clients
        clients = Client.query.all()
        
        # R√©cup√©rer les utilisateurs clients
        users_clients = User.query.filter_by(type_utilisateur='client').all()
        
        # Cr√©er un dictionnaire pour lier les clients aux utilisateurs
        clients_data = []
        for client in clients:
            user = next((u for u in users_clients if u.email == client.email), None)
            clients_data.append({
                'client': client,
                'user': user,
                'has_account': user is not None
            })
        
        return render_template('admin_clients_list.html', clients_data=clients_data)
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage de la liste des clients admin: {str(e)}")
        return render_template('error.html', error=str(e)), 500

@app.route('/admin/invitations')
def admin_invitations():
    """Page d'administration - Gestion des invitations"""
    try:
        # R√©cup√©rer toutes les invitations
        invitations = Invitation.query.order_by(Invitation.created_at.desc()).all()
        
        # Statistiques
        stats = {
            'total': len(invitations),
            'en_attente': len([i for i in invitations if i.statut == 'en_attente']),
            'acceptees': len([i for i in invitations if i.statut == 'acceptee']),
            'refusees': len([i for i in invitations if i.statut == 'refusee']),
            'expirees': len([i for i in invitations if i.statut == 'expiree'])
        }
        
        return render_template('admin_invitations.html', invitations=invitations, stats=stats)
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage des invitations admin: {str(e)}")
        return render_template('error.html', error=str(e)), 500

@app.route('/admin/clients/pending')
def admin_clients_pending():
    """Page d'administration - Clients en attente d'acceptation"""
    try:
        # R√©cup√©rer les invitations en attente
        invitations_pending = Invitation.query.filter_by(statut='en_attente').order_by(Invitation.created_at.desc()).all()
        
        # R√©cup√©rer les invitations refus√©es (pour relancer)
        invitations_refused = Invitation.query.filter_by(statut='refusee').order_by(Invitation.created_at.desc()).all()
        
        return render_template('admin_clients_pending.html', 
                             invitations_pending=invitations_pending,
                             invitations_refused=invitations_refused,
                             getTimeElapsed=getTimeElapsed)
    except Exception as e:
        logger.error(f"Erreur lors de l'affichage des clients en attente: {str(e)}")
        return render_template('error.html', error=str(e)), 500

# === API ENDPOINTS POUR L'ADMINISTRATION ===

@app.route('/api/invitations/<int:invitation_id>/resend', methods=['POST'])
def resend_invitation_admin(invitation_id):
    """Relancer une invitation"""
    try:
        invitation = Invitation.query.get(invitation_id)
        if not invitation:
            return jsonify({'success': False, 'error': 'Invitation non trouv√©e'}), 404
        
        # G√©n√©rer un nouveau token
        invitation.token = secrets.token_urlsafe(32)
        invitation.date_invitation = datetime.utcnow()
        invitation.statut = 'en_attente'
        
        # Envoyer l'email
        try:
            send_invitation_email(invitation.email, invitation.token, invitation.message_personnalise)
            db.session.commit()
            logger.info(f"‚úÖ Invitation relanc√©e pour {invitation.email}")
            return jsonify({
                'success': True,
                'message': f'Invitation relanc√©e avec succ√®s √† {invitation.email}'
            })
        except Exception as email_error:
            logger.error(f"Erreur lors de l'envoi de l'email: {str(email_error)}")
            db.session.rollback()
            return jsonify({
                'success': False,
                'error': f'Erreur lors de l\'envoi de l\'email: {str(email_error)}'
            }), 500
            
    except Exception as e:
        logger.error(f"Erreur lors de la relance de l'invitation {invitation_id}: {str(e)}")
        db.session.rollback()
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/invitations/<int:invitation_id>', methods=['DELETE'])
def delete_invitation(invitation_id):
    """Supprimer une invitation"""
    try:
        invitation = Invitation.query.get(invitation_id)
        if not invitation:
            return jsonify({'success': False, 'error': 'Invitation non trouv√©e'}), 404
        
        email = invitation.email
        db.session.delete(invitation)
        db.session.commit()
        
        logger.info(f"‚úÖ Invitation supprim√©e pour {email}")
        return jsonify({
            'success': True,
            'message': f'Invitation supprim√©e avec succ√®s'
        })
        
    except Exception as e:
        logger.error(f"Erreur lors de la suppression de l'invitation {invitation_id}: {str(e)}")
        db.session.rollback()
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/clients/<int:client_id>', methods=['GET'])
def get_client_details(client_id):
    """R√©cup√©rer les d√©tails d'un client"""
    try:
        client = Client.query.get(client_id)
        if not client:
            return jsonify({'success': False, 'error': 'Client non trouv√©'}), 404
        
        return jsonify({
            'success': True,
            'client': {
                'id': client.id,
                'nom': client.nom,
                'email': client.email,
                'telephone': client.telephone,
                'adresse': client.adresse,
                'siret': client.siret,
                'site_web': client.site_web,
                'description': client.description,
                'statut': client.statut,
                'created_at': client.created_at.isoformat() if client.created_at else None
            }
        })
        
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration du client {client_id}: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/clients', methods=['PUT'])
def update_client():
    """Mettre √† jour un client"""
    try:
        data = request.get_json()
        if not data or 'id' not in data:
            return jsonify({'success': False, 'error': 'Donn√©es manquantes'}), 400
        
        client = Client.query.get(data['id'])
        if not client:
            return jsonify({'success': False, 'error': 'Client non trouv√©'}), 404
        
        # Mettre √† jour les champs
        client.nom = data.get('nom', client.nom)
        client.email = data.get('email', client.email)
        client.telephone = data.get('telephone', client.telephone)
        client.adresse = data.get('adresse', client.adresse)
        client.siret = data.get('siret', client.siret)
        client.site_web = data.get('site_web', client.site_web)
        client.description = data.get('description', client.description)
        client.statut = data.get('statut', client.statut)
        client.updated_at = datetime.utcnow()
        
        db.session.commit()
        
        logger.info(f"‚úÖ Client mis √† jour: {client.nom} (ID: {client.id})")
        return jsonify({
            'success': True,
            'message': f'Client "{client.nom}" mis √† jour avec succ√®s'
        })
        
    except Exception as e:
        logger.error(f"Erreur lors de la mise √† jour du client: {str(e)}")
        db.session.rollback()
        return jsonify({'success': False, 'error': str(e)}), 500

@app.errorhandler(404)
def not_found(error):
    """Gestion des erreurs 404"""
    return render_template('error.html', error='Page non trouv√©e'), 404

@app.errorhandler(500)
def internal_error(error):
    """Gestion des erreurs 500"""
    try:
        db.session.rollback()
    except Exception as rollback_error:
        logger.error(f"‚ùå Erreur lors du rollback: {str(rollback_error)}")
    
    logger.error(f"‚ùå Erreur interne 500: {str(error)}")
    logger.error(f"‚ùå Type d'erreur: {type(error).__name__}")
    
    try:
        return render_template('error.html', error='Erreur interne du serveur'), 500
    except Exception as template_error:
        logger.error(f"‚ùå Erreur lors du rendu du template d'erreur: {str(template_error)}")
        return f"""
        <html>
        <head><title>Erreur 500 - MyXploit</title></head>
        <body>
            <h1>‚ùå Erreur interne du serveur</h1>
            <p>Une erreur s'est produite lors du traitement de votre demande.</p>
            <p>D√©tails: {str(error)}</p>
            <p><a href="/health">V√©rifier le statut de l'application</a></p>
        </body>
        </html>
        """, 500

def init_database():
    """Initialise la base de donn√©es et cr√©e les tables"""
    try:
        with app.app_context():
            db.create_all()
            logger.info("‚úÖ Base de donn√©es initialis√©e avec succ√®s")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'initialisation de la base: {str(e)}")
        raise

if __name__ == '__main__':
    # D√©marrage de l'application
    logger.info("üöÄ D√©marrage de l'application Myxploit...")
    
    try:
        # Initialiser la base de donn√©es
        init_database()
        
        # D√©marrer le serveur
        app.run(
            host=app.config['HOST'],
            port=app.config['PORT'],
            debug=app.config['DEBUG']
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erreur au d√©marrage: {str(e)}")
        raise
# Test - Fichier corrig√© localement
